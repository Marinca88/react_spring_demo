{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport WebSocketListenerInstance from \"../ws/WebSocketListener\";\n\nclass Question extends EventEmitter {\n  constructor() {\n    super();\n    this.state = {\n      questions: []\n    };\n    WebSocketListenerInstance.on(\"QUESTION_UPDATED\", event => {\n      QuestionInstance.addQuestion(event.question);\n      this.emit(\"QuestionAdded\", this.state.questions);\n    });\n  }\n\n  addTagToQuestion(index, tag) {\n    this.state.questions[index].tags = [...this.state.questions[index].tags, tag];\n  }\n\n  addQuestion(questions) {\n    this.state.questions = [...questions];\n  }\n\n  getQuestion() {\n    return this.state.questions;\n  }\n\n  removeQuetions() {\n    this.state.questions = [];\n  }\n  /*    getQuestionByText(text) {\r\n          return this.state.questions.filter(item => item.body.includes(text) || item.tags.includes(text) || item.title.includes(text));\r\n      }*/\n\n\n  getQuestionbyId(id) {\n    return this.state.questions[id];\n  }\n\n  upvote(question) {\n    console.log(\"before \" + index + \"  \" + this.state.questions[index].upvotes);\n    const index = this.state.questions.findIndex(item => item.body === question.body && item.title === question.title && item.createTime === question.createTime && item.author === question.author && item.upvotes === question.upvotes && question.downvotes === item.downvotes);\n    this.state.questions[index].upvotes = this.state.questions[index].upvotes + 1;\n  }\n\n  downvote(index) {\n    this.state.questions[index].downvotes = this.state.questions[index].downvotes + 1;\n  }\n\n  getVotes(index) {\n    var votes = this.state.questions[index].upvotes - this.state.questions[index].downvotes;\n    return votes;\n  }\n\n}\n\nconst QuestionInstance = new Question();\nexport default QuestionInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/model/Question.js"],"names":["EventEmitter","WebSocketListenerInstance","Question","constructor","state","questions","on","event","QuestionInstance","addQuestion","question","emit","addTagToQuestion","index","tag","tags","getQuestion","removeQuetions","getQuestionbyId","id","upvote","console","log","upvotes","findIndex","item","body","title","createTime","author","downvotes","downvote","getVotes","votes"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,yBAAP,MAAsC,yBAAtC;;AAEA,MAAMC,QAAN,SAAuBF,YAAvB,CAAmC;AAC/BG,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAGAJ,IAAAA,yBAAyB,CAACK,EAA1B,CAA6B,kBAA7B,EAAiDC,KAAK,IAAI;AACtDC,MAAAA,gBAAgB,CAACC,WAAjB,CAA6BF,KAAK,CAACG,QAAnC;AACA,WAAKC,IAAL,CAAU,eAAV,EAA2B,KAAKP,KAAL,CAAWC,SAAtC;AACH,KAHD;AAIH;;AAEDO,EAAAA,gBAAgB,CAACC,KAAD,EAAOC,GAAP,EAAY;AACxB,SAAKV,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BE,IAA5B,GAAmC,CAC/B,GAAG,KAAKX,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BE,IADA,EAE/BD,GAF+B,CAAnC;AAIH;;AAEDL,EAAAA,WAAW,CAACJ,SAAD,EAAY;AACnB,SAAKD,KAAL,CAAWC,SAAX,GAAuB,CACnB,GAAGA,SADgB,CAAvB;AAGH;;AAEDW,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKZ,KAAL,CAAWC,SAAlB;AACH;;AAEDY,EAAAA,cAAc,GAAG;AACb,SAAKb,KAAL,CAAWC,SAAX,GAAuB,EAAvB;AACH;AAEL;AACA;AACA;;;AAEIa,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAO,KAAKf,KAAL,CAAWC,SAAX,CAAqBc,EAArB,CAAP;AACH;;AAEDC,EAAAA,MAAM,CAACV,QAAD,EAAW;AACbW,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYT,KAAZ,GAAoB,IAApB,GAA2B,KAAKT,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAAnE;AACA,UAAMV,KAAK,GAAG,KAAKT,KAAL,CAAWC,SAAX,CAAqBmB,SAArB,CAA+BC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAchB,QAAQ,CAACgB,IAAvB,IAA+BD,IAAI,CAACE,KAAL,KAAejB,QAAQ,CAACiB,KAAvD,IAAgEF,IAAI,CAACG,UAAL,KAAoBlB,QAAQ,CAACkB,UAA7F,IAA2GH,IAAI,CAACI,MAAL,KAAgBnB,QAAQ,CAACmB,MAApI,IAA8IJ,IAAI,CAACF,OAAL,KAAiBb,QAAQ,CAACa,OAAxK,IAAmLb,QAAQ,CAACoB,SAAT,KAAuBL,IAAI,CAACK,SAAtP,CAAd;AACA,SAAK1B,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAA5B,GAAsC,KAAKnB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAA5B,GAAsC,CAA5E;AAEH;;AAEDQ,EAAAA,QAAQ,CAAClB,KAAD,EAAQ;AACZ,SAAKT,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BiB,SAA5B,GAAwC,KAAK1B,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BiB,SAA5B,GAAwC,CAAhF;AACH;;AAEDE,EAAAA,QAAQ,CAACnB,KAAD,EAAQ;AACZ,QAAIoB,KAAK,GAAG,KAAK7B,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAA5B,GAAsC,KAAKnB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BiB,SAA9E;AACA,WAAOG,KAAP;AACH;;AAvD8B;;AAyDnC,MAAMzB,gBAAgB,GAAG,IAAIN,QAAJ,EAAzB;AACA,eAAeM,gBAAf","sourcesContent":["import { EventEmitter } from \"events\"\r\nimport WebSocketListenerInstance from \"../ws/WebSocketListener\"\r\n\r\nclass Question extends EventEmitter{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            questions: []\r\n        };\r\n        WebSocketListenerInstance.on(\"QUESTION_UPDATED\", event => {\r\n            QuestionInstance.addQuestion(event.question);\r\n            this.emit(\"QuestionAdded\", this.state.questions);\r\n        })\r\n    }\r\n\r\n    addTagToQuestion(index,tag) {\r\n        this.state.questions[index].tags = [\r\n            ...this.state.questions[index].tags,\r\n            tag\r\n        ];\r\n    }\r\n\r\n    addQuestion(questions) {\r\n        this.state.questions = [\r\n            ...questions\r\n        ];\r\n    }\r\n\r\n    getQuestion() {\r\n        return this.state.questions;\r\n    }\r\n\r\n    removeQuetions() {\r\n        this.state.questions = [];\r\n    }\r\n\r\n/*    getQuestionByText(text) {\r\n        return this.state.questions.filter(item => item.body.includes(text) || item.tags.includes(text) || item.title.includes(text));\r\n    }*/\r\n\r\n    getQuestionbyId(id) {\r\n        return this.state.questions[id];\r\n    }\r\n\r\n    upvote(question) {\r\n        console.log(\"before \" + index + \"  \" + this.state.questions[index].upvotes)\r\n        const index = this.state.questions.findIndex(item => item.body === question.body && item.title === question.title && item.createTime === question.createTime && item.author === question.author && item.upvotes === question.upvotes && question.downvotes === item.downvotes);\r\n        this.state.questions[index].upvotes = this.state.questions[index].upvotes + 1;\r\n\r\n    }\r\n\r\n    downvote(index) {\r\n        this.state.questions[index].downvotes = this.state.questions[index].downvotes + 1\r\n    }\r\n\r\n    getVotes(index) {\r\n        var votes = this.state.questions[index].upvotes - this.state.questions[index].downvotes\r\n        return votes\r\n    }\r\n}\r\nconst QuestionInstance = new Question();\r\nexport default QuestionInstance;"]},"metadata":{},"sourceType":"module"}