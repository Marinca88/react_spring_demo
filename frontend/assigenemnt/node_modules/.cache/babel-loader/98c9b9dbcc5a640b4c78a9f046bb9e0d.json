{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iasmina\\\\Desktop\\\\a2\\\\assigenemnt2\\\\src\\\\container\\\\SmrtViewQuestion.js\",\n    _s = $RefreshSig$();\n\nimport ViewQuestion from '../presentational/ViewQuestion';\nimport AnswarePresenterInstance from '../presenter/AnswarePresenter';\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter';\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmartViewQuestion() {\n  _s();\n\n  const [question, setQuestion] = useState({\n    title: \"\",\n    body: \"\",\n    tags: [],\n    createTime: \"\"\n  });\n  const {\n    index\n  } = useParams();\n  const [style, setStyle] = useState({\n    style: {\n      display: \"none\"\n    }\n  });\n  useEffect(() => {\n    setQuestion(QuestionPresenterInstance.getQuestionById(index));\n  }, []);\n  const answares = AnswarePresenterInstance.getAnsware(index);\n\n  const onPushAddAnsware = () => {\n    setStyle({\n      style: {\n        display: \"inline-box\"\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ViewQuestion, {\n    title: question.title,\n    body: question.body,\n    createTime: question.createTime,\n    tags: question.tags,\n    answares: answares,\n    style: style.style,\n    onPushAddAnsware: onPushAddAnsware\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 13\n  }, this);\n}\n\n_s(SmartViewQuestion, \"pQSNLJlMnCqg7MFzHXq+2Dn4iHw=\", false, function () {\n  return [useParams];\n});\n\n_c = SmartViewQuestion;\n;\nexport default SmartViewQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmartViewQuestion\");","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/container/SmrtViewQuestion.js"],"names":["ViewQuestion","AnswarePresenterInstance","QuestionPresenterInstance","useEffect","useState","useParams","SmartViewQuestion","question","setQuestion","title","body","tags","createTime","index","style","setStyle","display","getQuestionById","answares","getAnsware","onPushAddAnsware"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gCAAzB;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AACA,OAAOC,yBAAP,MAAsC,gCAAtC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAQC,SAAR,QAAwB,kBAAxB;;;AAEA,SAASC,iBAAT,GAA6B;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC;AACrCK,IAAAA,KAAK,EAAE,EAD8B;AAErCC,IAAAA,IAAI,EAAE,EAF+B;AAGrCC,IAAAA,IAAI,EAAE,EAH+B;AAIrCC,IAAAA,UAAU,EAAC;AAJ0B,GAAD,CAAxC;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAYR,SAAS,EAA3B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC;AAC/BU,IAAAA,KAAK,EAAE;AAACE,MAAAA,OAAO,EAAC;AAAT;AADwB,GAAD,CAAlC;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,WAAW,CAACN,yBAAyB,CAACe,eAA1B,CAA0CJ,KAA1C,CAAD,CAAX;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,QAAMK,QAAQ,GAAGjB,wBAAwB,CAACkB,UAAzB,CAAoCN,KAApC,CAAjB;;AAEA,QAAMO,gBAAgB,GAAG,MAAM;AAC3BL,IAAAA,QAAQ,CAAC;AACLD,MAAAA,KAAK,EAAE;AAACE,QAAAA,OAAO,EAAC;AAAT;AADF,KAAD,CAAR;AAGH,GAJD;;AAMA,sBAAQ,QAAC,YAAD;AAAc,IAAA,KAAK,EAAET,QAAQ,CAACE,KAA9B;AACJ,IAAA,IAAI,EAAEF,QAAQ,CAACG,IADX;AAEJ,IAAA,UAAU,EAAEH,QAAQ,CAACK,UAFjB;AAGJ,IAAA,IAAI,EAAEL,QAAQ,CAACI,IAHX;AAIJ,IAAA,QAAQ,EAAEO,QAJN;AAKJ,IAAA,KAAK,EAAEJ,KAAK,CAACA,KALT;AAMJ,IAAA,gBAAgB,EAAEM;AANd;AAAA;AAAA;AAAA;AAAA,UAAR;AASH;;GA/BQd,iB;UAOaD,S;;;KAPbC,iB;AA+BR;AACD,eAAeA,iBAAf","sourcesContent":["import ViewQuestion from '../presentational/ViewQuestion'\r\nimport AnswarePresenterInstance from '../presenter/AnswarePresenter'\r\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter'\r\nimport { useEffect, useState } from \"react\"\r\nimport {useParams} from \"react-router-dom\"\r\n\r\nfunction SmartViewQuestion() {\r\n    const [question, setQuestion] = useState({\r\n        title: \"\",\r\n        body: \"\",\r\n        tags: [],\r\n        createTime:\"\"\r\n    });\r\n    const { index } = useParams();\r\n    const [style, setStyle] = useState({\r\n        style: {display:\"none\"}\r\n    });\r\n    useEffect(() => {\r\n        setQuestion(QuestionPresenterInstance.getQuestionById(index))\r\n    }, []);\r\n    const answares = AnswarePresenterInstance.getAnsware(index);\r\n\r\n    const onPushAddAnsware = () => {\r\n        setStyle({\r\n            style: {display:\"inline-box\"}\r\n        });\r\n    }\r\n\r\n    return (<ViewQuestion title={question.title}\r\n        body={question.body}\r\n        createTime={question.createTime}\r\n        tags={question.tags}\r\n        answares={answares}\r\n        style={style.style}\r\n        onPushAddAnsware={onPushAddAnsware}\r\n    />\r\n    );\r\n};\r\nexport default SmartViewQuestion\r\n"]},"metadata":{},"sourceType":"module"}