{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iasmina\\\\Desktop\\\\a2\\\\assigenemnt2\\\\src\\\\container\\\\SmartHome.js\",\n    _s = $RefreshSig$();\n\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter';\nimport AppPresenterInstance from '../presenter/AppPresenter';\nimport AppPresneter from \"../presenter/AppPresenter\";\nimport Home from '../presentational/Home';\nimport VotesPresenterInstance from '../presenter/VotesPresenter';\nimport { useEffect, useState } from 'react';\nimport UserPresenterInstance from '../presenter/UserPresenter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmartHome() {\n  _s();\n\n  const [text, setNewText] = useState({\n    text: AppPresenterInstance.getLoggedUser()\n  });\n  const [questions, setNewQuestions] = useState({\n    questions: []\n  });\n  useEffect(() => {\n    //const client = AppPresenterInstance.getClientRest()\n    QuestionPresenterInstance.getQuestion(\"\").then(foundQuestions => {\n      //console.log(client)\n      setNewQuestions({\n        questions: [...foundQuestions]\n      });\n    });\n  }, []);\n\n  const onChange = (property, newValue) => {\n    setNewText({\n      [property]: newValue\n    });\n  };\n\n  const onSearch = () => {\n    QuestionPresenterInstance.getQuestionByText(text.text).then(foundQuestions => {\n      setNewQuestions({\n        questions: [...foundQuestions]\n      });\n    });\n  };\n\n  const onSelect = title => {\n    QuestionPresenterInstance.getQuestion().then(foundQuestions => {\n      setNewQuestions({\n        questions: [...foundQuestions]\n      });\n    });\n    var index = questions.questions.indexOf(questions.questions.find(element => element.title === title));\n    window.location.assign(\"/#/question-details/\" + index);\n  };\n\n  const onVote = (ud, title, body, user, createTime, upvotes, downvotes) => {\n    const questionsi = questions.questions;\n    const quest = questionsi.find(q => q.title === title && q.body === body && q.createTime === createTime && q.author === user && q.upvotes === upvotes && q.downvotes === downvotes);\n\n    if (ud === \"up\") {\n      QuestionPresenterInstance.upvote(quest).then(foundQuestions => {\n        setNewQuestions({\n          questions: [...foundQuestions]\n        });\n      }); //console.log(questions.questions);\n    } else {\n      if (ud === \"down\") {\n        QuestionPresenterInstance.downvote(quest).then(foundQuestions => {\n          setNewQuestions({\n            questions: [...foundQuestions]\n          });\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Home, {\n    text: text.text,\n    questions: questions.questions,\n    onSearch: onSearch,\n    onChange: onChange,\n    onSelect: onSelect,\n    onVote: onVote\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SmartHome, \"fTyidhlLSfZFdVVWhC5Y+NlUi8U=\");\n\n_c = SmartHome;\nexport default SmartHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmartHome\");","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/container/SmartHome.js"],"names":["QuestionPresenterInstance","AppPresenterInstance","AppPresneter","Home","VotesPresenterInstance","useEffect","useState","UserPresenterInstance","SmartHome","text","setNewText","getLoggedUser","questions","setNewQuestions","getQuestion","then","foundQuestions","onChange","property","newValue","onSearch","getQuestionByText","onSelect","title","index","indexOf","find","element","window","location","assign","onVote","ud","body","user","createTime","upvotes","downvotes","questionsi","quest","q","author","upvote","downvote"],"mappings":"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","sourcesContent":["import QuestionPresenterInstance from '../presenter/QuestionPresenter'\r\nimport AppPresenterInstance from '../presenter/AppPresenter'\r\nimport AppPresneter from \"../presenter/AppPresenter\"\r\nimport Home from '../presentational/Home'\r\nimport VotesPresenterInstance from '../presenter/VotesPresenter'\r\nimport { useEffect, useState } from 'react';\r\nimport UserPresenterInstance from '../presenter/UserPresenter';\r\n\r\nfunction SmartHome() {\r\n    const [text, setNewText] = useState({\r\n        text:AppPresenterInstance.getLoggedUser()\r\n    });\r\n    const [questions, setNewQuestions] = useState({\r\n        questions: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        //const client = AppPresenterInstance.getClientRest()\r\n        QuestionPresenterInstance.getQuestion(\"\").then(foundQuestions => {\r\n            //console.log(client)\r\n            setNewQuestions({\r\n                questions: [...foundQuestions]\r\n            }\r\n            )\r\n        });\r\n    }, []);\r\n\r\n\r\n    const onChange = (property, newValue) => {\r\n        setNewText({\r\n            [property]: newValue\r\n        });\r\n    }\r\n    const onSearch = () => {\r\n        QuestionPresenterInstance.getQuestionByText(text.text).then(foundQuestions => {\r\n            setNewQuestions({\r\n                questions: [...foundQuestions]\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    const onSelect = (title) => {\r\n        QuestionPresenterInstance.getQuestion().then(foundQuestions => {\r\n            setNewQuestions({\r\n                questions: [...foundQuestions]\r\n            }\r\n            )\r\n        });\r\n        var index = questions.questions.indexOf(questions.questions.find(element => element.title === title))\r\n        window.location.assign(\"/#/question-details/\" + index)\r\n    }\r\n\r\n    const onVote = (ud, title, body, user, createTime, upvotes, downvotes) => {\r\n        const questionsi = questions.questions\r\n        const quest = questionsi.find(q => q.title === title && q.body === body && q.createTime === createTime && q.author === user && q.upvotes === upvotes && q.downvotes === downvotes );\r\n        if (ud === \"up\") {\r\n            QuestionPresenterInstance.upvote(quest).then(foundQuestions => {\r\n                setNewQuestions({\r\n                    questions: [...foundQuestions]\r\n                })\r\n            });\r\n            //console.log(questions.questions);\r\n\r\n            } else {\r\n                if (ud === \"down\") {\r\n                    QuestionPresenterInstance.downvote(quest).then(foundQuestions => {\r\n                        setNewQuestions({\r\n                            questions: [...foundQuestions]\r\n                        })\r\n                    });\r\n\r\n                }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Home text={text.text}\r\n            questions={questions.questions}\r\n            onSearch={onSearch}\r\n            onChange={onChange}\r\n            onSelect={onSelect}\r\n            onVote={onVote}\r\n            />\r\n        );\r\n}\r\nexport default SmartHome;"]},"metadata":{},"sourceType":"module"}