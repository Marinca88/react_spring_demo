{"ast":null,"code":"const BASE_URL = \"http://localhost:8080\";\n\nclass RestClient {\n  constructor(username, password) {\n    this.loadAllStudents = () => {\n      return fetch(`${BASE_URL}/stackoverflow`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadSerachedQuestions = text => {\n      return fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAnswaresForQuestion = id => {\n      return fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadRefreshedAnswares = (upvotes, downvotes, text, creation_date, question_id) => {\n      return fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes,\n          \"text\": text,\n          \"creation_date\": creation_date,\n          \"question_id\": question_id,\n          \"author\": \"\"\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.authorization = \"Basic \" + btoa(username + \":\" + password);\n  }\n\n}\n\nexport default RestClient;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/rest/RestClient.js"],"names":["BASE_URL","RestClient","constructor","username","password","loadAllStudents","fetch","method","headers","authorization","then","response","json","loadSerachedQuestions","text","loadUpdatedQuestion","title","body","createTime","author","upvotes","downvotes","tags","console","log","JSON","stringify","loadUpdatedDownQuestion","loadAnswaresForQuestion","id","loadRefreshedAnswares","creation_date","question_id","btoa"],"mappings":"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","sourcesContent":["const BASE_URL = \"http://localhost:8080\";\r\nclass RestClient {\r\n\tconstructor(username, password) {\r\n\t\tthis.authorization = \"Basic \" + btoa(username + \":\" + password);\r\n\t}\r\n\r\n\tloadAllStudents = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadSerachedQuestions = (text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\":downvotes\r\n            }),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAnswaresForQuestion = (id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tloadRefreshedAnswares = (upvotes,downvotes,text,creation_date,question_id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes,\r\n\t\t\t\t\"text\": text,\r\n\t\t\t\t\"creation_date\":creation_date,\r\n\t\t\t\t\"question_id\": question_id,\r\n\t\t\t\t\"author\": \"\"\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\nexport default RestClient;"]},"metadata":{},"sourceType":"module"}