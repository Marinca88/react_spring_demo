{"ast":null,"code":"const BASE_URL = \"http://localhost:8080\";\n\nclass RestClient {\n  constructor(_username, _password) {\n    this.loadUser = id => {\n      return fetch(`${BASE_URL}/stackoverflow/getUser${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.editUser = user => {\n      return fetch(`${BASE_URL}/stackoverflow/updateProfile`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"name\": user.username,\n          \"username\": \"admin\",\n          \"email\": \"login\",\n          \"password\": user.password,\n          \"score\": 0\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllStudents = () => {\n      console.log(this.authorization);\n      return fetch(`${BASE_URL}/stackoverflow`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadSerachedQuestions = text => {\n      return fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAnswaresForQuestion = id => {\n      return fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllAnswares = () => {\n      return fetch(`${BASE_URL}/stackoverflow/allAnswares`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.editAnsware = (id, text) => {\n      return fetch(`${BASE_URL}/stackoverflow/updateAnsware${id}?text=${text}`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllTags = () => {\n      return fetch(`${BASE_URL}/stackoverflow/allTags`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadRefreshedAnswares = (upvotes, downvotes, text, question_id) => {\n      return fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes,\n          \"text\": text,\n          \"creation_date\": \"date\",\n          \"question_id\": question_id,\n          \"author\": \"author\"\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.createQuestion = question => {\n      return fetch(`${BASE_URL}/stackoverflow/createQuestion`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"title\": question.title,\n          \"body\": question.body,\n          \"createTime\": question.createTime,\n          \"author\": question.author,\n          \"tags\": question.tags,\n          \"upvotes\": question.upvotes,\n          \"downvotes\": question.downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadLoginText = (username, password) => {\n      console.log(password);\n      return fetch(`${BASE_URL}/stackoverflow/log?username=${username}&password=${password}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.createTag = tag => {\n      return fetch(`${BASE_URL}/stackoverflow/createTag`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"text\": tag.text\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    console.log(_username);\n    console.log(_password);\n    this.authorization = \"Basic \" + btoa(_username + \":\" + _password);\n  }\n\n}\n\nexport default RestClient;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/rest/RestClient.js"],"names":["BASE_URL","RestClient","constructor","username","password","loadUser","id","fetch","method","headers","authorization","then","response","json","editUser","user","body","JSON","stringify","loadAllStudents","console","log","loadSerachedQuestions","text","loadUpdatedQuestion","title","createTime","author","upvotes","downvotes","tags","loadUpdatedDownQuestion","loadAnswaresForQuestion","loadAllAnswares","editAnsware","loadAllTags","loadRefreshedAnswares","question_id","createQuestion","question","loadLoginText","createTag","tag","btoa"],"mappings":"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","sourcesContent":["const BASE_URL = \"http://localhost:8080\";\r\nclass RestClient {\r\n\tconstructor(username, password) {\r\n\t\tconsole.log(username)\r\n\t\tconsole.log(password)\r\n\t\tthis.authorization = \"Basic \" + btoa(username + \":\" + password);\r\n\t}\r\n\r\n\tloadUser = (id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/getUser${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\teditUser = (user) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/updateProfile`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"name\": user.username,\r\n\t\t\t\t\"username\": \"admin\",\r\n\t\t\t\t\"email\": \"login\",\r\n\t\t\t\t\"password\": user.password,\r\n\t\t\t\t\"score\": 0\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n    }\r\n\r\n\tloadAllStudents = () => {\r\n\t\tconsole.log(this.authorization)\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadSerachedQuestions = (text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\":downvotes\r\n            }),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAnswaresForQuestion = (id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAllAnswares = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/allAnswares`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json()\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\teditAnsware = (id,text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/updateAnsware${id}?text=${text}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAllTags = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/allTags`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json()\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tloadRefreshedAnswares = (upvotes,downvotes,text,question_id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes,\r\n\t\t\t\t\"text\": text,\r\n\t\t\t\t\"creation_date\":\"date\",\r\n\t\t\t\t\"question_id\": question_id,\r\n\t\t\t\t\"author\": \"author\"\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcreateQuestion = (question) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createQuestion`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": question.title,\r\n\t\t\t\t\"body\": question.body,\r\n\t\t\t\t\"createTime\": question.createTime,\r\n\t\t\t\t\"author\": question.author,\r\n\t\t\t\t\"tags\": question.tags,\r\n\t\t\t\t\"upvotes\": question.upvotes,\r\n\t\t\t\t\"downvotes\": question.downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadLoginText = (username, password) => {\r\n\t\tconsole.log(password)\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/log?username=${username}&password=${password}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tcreateTag = (tag) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createTag`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"text\": tag.text\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\nexport default RestClient;"]},"metadata":{},"sourceType":"module"}