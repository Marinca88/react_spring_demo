{"ast":null,"code":"/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n  webSocket.terminate = function () {\n    const noOp = () => {}; // set all callbacks to no op\n\n\n    this.onerror = noOp;\n    this.onmessage = noOp;\n    this.onopen = noOp;\n    const ts = new Date();\n    const origOnClose = this.onclose; // Track delay in actual closure of the socket\n\n    this.onclose = closeEvent => {\n      const delay = new Date().getTime() - ts.getTime();\n      debug(`Discarded socket closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n    };\n\n    this.close();\n    origOnClose.call(this, {\n      code: 4001,\n      reason: 'Heartbeat failure, discarding the socket',\n      wasClean: false\n    });\n  };\n}","map":{"version":3,"mappings":"AAEA;;;AAGA,OAAM,SAAUA,gBAAV,CACJC,SADI,EAEJC,KAFI,EAEwB;AAE5BD,WAAS,CAACE,SAAV,GAAsB;AACpB,UAAMC,IAAI,GAAG,MAAK,CAAG,CAArB,CADoB,CAGpB;;;AACA,SAAKC,OAAL,GAAeD,IAAf;AACA,SAAKE,SAAL,GAAiBF,IAAjB;AACA,SAAKG,MAAL,GAAcH,IAAd;AAEA,UAAMI,EAAE,GAAG,IAAIC,IAAJ,EAAX;AAEA,UAAMC,WAAW,GAAG,KAAKC,OAAzB,CAVoB,CAYpB;;AACA,SAAKA,OAAL,GAAeC,UAAU,IAAG;AAC1B,YAAMC,KAAK,GAAG,IAAIJ,IAAJ,GAAWK,OAAX,KAAuBN,EAAE,CAACM,OAAH,EAArC;AACAZ,WAAK,CACH,iCAAiCW,KAAK,yBAAyBD,UAAU,CAACG,IAAI,IAAIH,UAAU,CAACI,MAAM,EADhG,CAAL;AAGD,KALD;;AAOA,SAAKC,KAAL;AAEAP,eAAW,CAACQ,IAAZ,CAAiB,IAAjB,EAAuB;AACrBH,UAAI,EAAE,IADe;AAErBC,YAAM,EAAE,0CAFa;AAGrBG,cAAQ,EAAE;AAHW,KAAvB;AAKD,GA3BD;AA4BD","names":["augmentWebsocket","webSocket","debug","terminate","noOp","onerror","onmessage","onopen","ts","Date","origOnClose","onclose","closeEvent","delay","getTime","code","reason","close","call","wasClean"],"sources":["C:\\Users\\Iasmina\\Desktop\\a2\\assigenemnt2\\node_modules\\@stomp\\stompjs\\src\\augment-websocket.ts"],"sourcesContent":["import { IStompSocket } from './types';\n\n/**\n * @internal\n */\nexport function augmentWebsocket(\n  webSocket: IStompSocket,\n  debug: (msg: string) => void\n) {\n  webSocket.terminate = function () {\n    const noOp = () => {};\n\n    // set all callbacks to no op\n    this.onerror = noOp;\n    this.onmessage = noOp;\n    this.onopen = noOp;\n\n    const ts = new Date();\n\n    const origOnClose = this.onclose;\n\n    // Track delay in actual closure of the socket\n    this.onclose = closeEvent => {\n      const delay = new Date().getTime() - ts.getTime();\n      debug(\n        `Discarded socket closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`\n      );\n    };\n\n    this.close();\n\n    origOnClose.call(this, {\n      code: 4001,\n      reason: 'Heartbeat failure, discarding the socket',\n      wasClean: false,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}