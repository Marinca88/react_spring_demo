{"ast":null,"code":"import QuestionInstance from '../model/Question';\nimport RestClient from '../rest/RestClient'; //const client = new RestClient(\"username1\", \"password\");\n\nclass QuestionPresenter {\n  addTagToQuestion(index, tag) {\n    return QuestionInstance.addTagToQuestion(index, tag);\n  }\n\n  async addQuestion(newQuestion, client) {\n    var message = await client.createQuestion(newQuestion);\n  }\n\n  async getQuestion(client) {\n    var questions = await client.loadAllStudents();\n    QuestionInstance.addQuestion(questions);\n    return QuestionInstance.getQuestion();\n  }\n\n  async getQuestionByText(text, client) {\n    var questions = await client.loadSerachedQuestions(text);\n    QuestionInstance.removeQuetions();\n    QuestionInstance.addQuestion(questions);\n    return QuestionInstance.getQuestion();\n  }\n\n  async getQuestionById(id, client) {\n    var questions = await client.loadAllStudents();\n    return questions[id];\n  }\n\n  async upvote(question, client) {\n    var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\n    console.log(message.message);\n\n    if (message.message === \"Voted\") {\n      return QuestionInstance.upvote(question);\n    } else {\n      return QuestionInstance.getQuestion();\n    }\n  }\n\n  async downvote(question, client) {\n    var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\n    console.log(message.message);\n\n    if (message.message === \"Voted\") {\n      return QuestionInstance.downvote(question);\n    } else {\n      return QuestionInstance.getQuestion();\n    }\n  }\n\n  async uVote(question, client) {\n    var questions = await client.UpVotedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\n    return questions;\n  }\n\n  async dVote(question, client) {\n    var questions = await client.DownVotedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\n    return questions;\n  }\n\n}\n\nconst QuestionPresenterInstance = new QuestionPresenter();\nexport default QuestionPresenterInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/git_demo/frontend/assigenemnt2/src/presenter/QuestionPresenter.js"],"names":["QuestionInstance","RestClient","QuestionPresenter","addTagToQuestion","index","tag","addQuestion","newQuestion","client","message","createQuestion","getQuestion","questions","loadAllStudents","getQuestionByText","text","loadSerachedQuestions","removeQuetions","getQuestionById","id","upvote","question","loadUpdatedQuestion","title","body","createTime","author","upvotes","downvotes","tags","console","log","downvote","uVote","UpVotedQuestion","dVote","DownVotedQuestion","QuestionPresenterInstance"],"mappings":"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","sourcesContent":["import QuestionInstance from '../model/Question';\r\nimport RestClient from '../rest/RestClient';\r\n\r\n//const client = new RestClient(\"username1\", \"password\");\r\nclass QuestionPresenter{\r\n\r\n\r\n    addTagToQuestion(index, tag) {\r\n        return QuestionInstance.addTagToQuestion(index, tag);\r\n    }\r\n    async addQuestion(newQuestion,client) {\r\n        var message = await client.createQuestion(newQuestion);\r\n    }\r\n    async getQuestion(client){\r\n\r\n        var questions = await client.loadAllStudents();\r\n        QuestionInstance.addQuestion(questions);\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    async getQuestionByText(text,client) {\r\n        var questions = await client.loadSerachedQuestions(text);\r\n        QuestionInstance.removeQuetions();\r\n        QuestionInstance.addQuestion(questions);\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    async getQuestionById(id,client) {\r\n        var questions = await client.loadAllStudents();\r\n        return questions[id];\r\n\r\n    }\r\n\r\n    async upvote(question,client) {\r\n        \r\n        var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\r\n        console.log(message.message);\r\n        if (message.message === \"Voted\") {\r\n            return QuestionInstance.upvote(question);\r\n        } else {\r\n            return QuestionInstance.getQuestion();\r\n        }\r\n    }\r\n\r\n    async downvote(question,client) {\r\n        var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\r\n        console.log(message.message);\r\n        if (message.message === \"Voted\") {\r\n            return QuestionInstance.downvote(question);\r\n        } else {\r\n            return QuestionInstance.getQuestion();\r\n        }\r\n    }\r\n\r\n    async uVote(question, client) {\r\n        var questions = await client.UpVotedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\r\n        return questions;\r\n    }\r\n    async dVote(question, client) {\r\n        var questions = await client.DownVotedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\r\n        return questions;\r\n    }\r\n}\r\nconst QuestionPresenterInstance = new QuestionPresenter();\r\nexport default QuestionPresenterInstance;"]},"metadata":{},"sourceType":"module"}