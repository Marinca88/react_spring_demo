{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iasmina\\\\Desktop\\\\a2\\\\assigenemnt2\\\\src\\\\container\\\\SmrtViewQuestion.js\",\n    _s = $RefreshSig$();\n\nimport ViewQuestion from '../presentational/ViewQuestion';\nimport AnswarePresenterInstance from '../presenter/AnswarePresenter';\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter';\nimport AppPresneter from \"../presenter/AppPresenter\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport RestClient from '../rest/RestClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmartViewQuestion() {\n  _s();\n\n  const [loggedUser, setLoggedUser] = useState({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    score: 0,\n    username: \"\"\n  });\n  const [question, setQuestion] = useState({\n    title: \"\",\n    body: \"\",\n    tags: [],\n    createTime: \"\",\n    author: \"\",\n    upvotes: 0,\n    downvotes: 0\n  });\n  const [editedValue, setEdit] = useState({\n    text: \"\"\n  });\n  const {\n    index\n  } = useParams();\n  const [text, setText] = useState({\n    text: \"\",\n    authorUsername: \"username1\",\n    referenceQuestion: index,\n    upvotes: 0,\n    downvotes: 0\n  });\n  const [chAnsware, setChAnsware] = useState({\n    text: \"\"\n  });\n\n  const onChAnsware = newValue => {\n    setChAnsware({\n      text: newValue\n    });\n  };\n\n  const [answares, setAnswares] = useState({\n    answares: []\n  });\n  useEffect(() => {\n    AppPresneter.getLoggedUser().then(lgdUser => {\n      if (lgdUser.name === \"\" && lgdUser.password === \"\") {\n        window.location.assign(\"#/error\");\n      }\n\n      const client = new RestClient(lgdUser.name, lgdUser.password);\n      QuestionPresenterInstance.getQuestionById(index, client).then(foundQuestion => {\n        setQuestion({ ...foundQuestion\n        });\n      });\n      AnswarePresenterInstance.getAnswaresForQuestion(index).then(foundAnswares => {\n        setAnswares({\n          answares: [...foundAnswares]\n        });\n      });\n      setLoggedUser({ ...lgdUser\n      });\n    });\n  }, []);\n\n  const onChangeTextArea = (property, newValue) => {\n    setText({ ...text,\n      [property]: newValue\n    });\n  };\n\n  const onAddAnsware = () => {\n    AnswarePresenterInstance.addAnsware(text).then(foundAnswares => {\n      setAnswares({\n        answares: [...foundAnswares]\n      });\n    });\n  };\n\n  const onOpenEditAnsware = (proprety, newValue) => {\n    setText({ ...text,\n      [proprety]: newValue\n    });\n    setEdit({\n      text: newValue\n    });\n  };\n\n  const onEditAnsware = () => {\n    var answaresi = AnswarePresenterInstance.getAnswares();\n    var ind = answaresi.indexOf(answaresi.find(element => element.text === chAnsware.text));\n    console.log(ind);\n    AnswarePresenterInstance.editAnsware(text, editedValue.text).then(foundAnswares => {\n      setAnswares({\n        answares: [...foundAnswares]\n      });\n    });\n  };\n\n  const onVote = (ud, type, text) => {\n    const client = new RestClient(loggedUser.name, loggedUser.password);\n\n    if (type === \"question\") {\n      if (ud === \"up\") {\n        QuestionPresenterInstance.uVote({\n          title: question.title,\n          body: question.body,\n          creationTime: question.createTime,\n          author: question.author,\n          upvotes: question.upvotes,\n          downvotes: question.downvotes,\n          tags: question.tags\n        }, client).then(foundQuestions => {\n          var q = foundQuestions.filter(element => element.title === question.title && element.body === question.body && element.author === question.author);\n          setQuestion({ ...q[0]\n          });\n        });\n      } else {\n        if (ud === \"down\") {\n          QuestionPresenterInstance.dVote({\n            title: question.title,\n            body: question.body,\n            creationTime: question.createTime,\n            author: \"\",\n            upvotes: question.upvotes,\n            downvotes: question.downvotes,\n            tags: question.tags\n          }, client).then(foundQuestions => {\n            var q = foundQuestions.filter(element => element.title === question.title && element.body === question.body && element.author === question.author);\n            setQuestion({ ...q[0]\n            });\n          });\n        }\n      }\n    } else {\n      if (ud === \"up\") {\n        AnswarePresenterInstance.upvote(index).then(foundAnswares => {\n          setAnswares({\n            answares: [...foundAnswares]\n          });\n        });\n      } else {\n        if (ud === \"down\") {\n          AnswarePresenterInstance.downvote(index).then(foundAnswares => {\n            setAnswares({\n              answares: [...foundAnswares]\n            });\n          });\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ViewQuestion, {\n    title: question.title,\n    body: question.body,\n    createTime: question.createTime,\n    tags: question.tags,\n    answares: answares.answares,\n    text: text.text,\n    onChangeTextArea: onChangeTextArea,\n    onAddAnsware: onAddAnsware,\n    onOpenEditAnsware: onOpenEditAnsware,\n    onEditAnsware: onEditAnsware,\n    onChAnsware: onChAnsware,\n    onVote: onVote,\n    upvotes: question.upvotes,\n    downvotes: question.downvotes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 13\n  }, this);\n}\n\n_s(SmartViewQuestion, \"E3QW3YmN4Jjn1OGv6eMZkQrDEBQ=\", false, function () {\n  return [useParams];\n});\n\n_c = SmartViewQuestion;\n;\nexport default SmartViewQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmartViewQuestion\");","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/container/SmrtViewQuestion.js"],"names":["ViewQuestion","AnswarePresenterInstance","QuestionPresenterInstance","AppPresneter","useEffect","useState","useParams","RestClient","SmartViewQuestion","loggedUser","setLoggedUser","email","name","password","score","username","question","setQuestion","title","body","tags","createTime","author","upvotes","downvotes","editedValue","setEdit","text","index","setText","authorUsername","referenceQuestion","chAnsware","setChAnsware","onChAnsware","newValue","answares","setAnswares","getLoggedUser","then","lgdUser","window","location","assign","client","getQuestionById","foundQuestion","getAnswaresForQuestion","foundAnswares","onChangeTextArea","property","onAddAnsware","addAnsware","onOpenEditAnsware","proprety","onEditAnsware","answaresi","getAnswares","ind","indexOf","find","element","console","log","editAnsware","onVote","ud","type","uVote","creationTime","foundQuestions","q","filter","dVote","upvote","downvote"],"mappings":"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","sourcesContent":["import ViewQuestion from '../presentational/ViewQuestion'\r\nimport AnswarePresenterInstance from '../presenter/AnswarePresenter'\r\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter'\r\nimport AppPresneter from \"../presenter/AppPresenter\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport RestClient from '../rest/RestClient';\r\n\r\n\r\nfunction SmartViewQuestion() {\r\n\r\n    const [loggedUser, setLoggedUser] = useState({\r\n        email: \"\",\r\n        name: \"\",\r\n        password: \"\",\r\n        score: 0,\r\n        username: \"\"\r\n    })\r\n\r\n    const [question, setQuestion] = useState({\r\n        title: \"\",\r\n        body: \"\",\r\n        tags: [],\r\n        createTime: \"\",\r\n        author:\"\",\r\n        upvotes: 0,\r\n        downvotes: 0\r\n    });\r\n\r\n    const [editedValue, setEdit] = useState({\r\n        text: \"\"\r\n    });\r\n\r\n    const { index } = useParams();\r\n\r\n    const [text, setText] = useState({\r\n        text: \"\",\r\n        authorUsername: \"username1\",\r\n        referenceQuestion: index,\r\n        upvotes: 0,\r\n        downvotes:0\r\n    });\r\n\r\n    const [chAnsware, setChAnsware] = useState({\r\n        text: \"\"\r\n    });\r\n\r\n    const onChAnsware = (newValue) => {\r\n        setChAnsware({\r\n            text:newValue\r\n        });\r\n    }\r\n\r\n    const [answares, setAnswares] = useState({\r\n        answares: []\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        AppPresneter.getLoggedUser().then(lgdUser => {\r\n            if (lgdUser.name === \"\" && lgdUser.password === \"\") {\r\n                window.location.assign(\"#/error\");\r\n            }\r\n            const client = new RestClient(lgdUser.name, lgdUser.password);\r\n            QuestionPresenterInstance.getQuestionById(index,client).then(foundQuestion => {\r\n                setQuestion({\r\n                    ...foundQuestion\r\n                }\r\n                )\r\n            });\r\n            AnswarePresenterInstance.getAnswaresForQuestion(index).then(foundAnswares => {\r\n                setAnswares({\r\n                    answares: [...foundAnswares]\r\n                }\r\n                )\r\n            });\r\n            setLoggedUser({\r\n                ...lgdUser\r\n            })\r\n        })\r\n    }, []);\r\n\r\n\r\n    const onChangeTextArea = (property, newValue) => {\r\n        setText({\r\n            ...text,\r\n            [property]: newValue\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const onAddAnsware = () => {\r\n        AnswarePresenterInstance.addAnsware(text).then(foundAnswares => {\r\n            setAnswares({\r\n                answares: [...foundAnswares]\r\n            }\r\n            )\r\n        });\r\n        \r\n    }\r\n\r\n    const onOpenEditAnsware = (proprety,newValue) => {\r\n        setText({\r\n            ...text,\r\n            [proprety]: newValue\r\n        });\r\n        setEdit({\r\n            text: newValue\r\n        });\r\n    }\r\n\r\n    const onEditAnsware = () => {\r\n        var answaresi = AnswarePresenterInstance.getAnswares()\r\n        var ind = answaresi.indexOf(answaresi.find(element => element.text === chAnsware.text))\r\n        console.log(ind)\r\n        AnswarePresenterInstance.editAnsware(text,editedValue.text).then(foundAnswares => {\r\n            setAnswares({\r\n                answares: [...foundAnswares]\r\n            }\r\n            )\r\n        });\r\n        \r\n    }\r\n\r\n    const onVote = (ud, type, text) => {\r\n        const client = new RestClient(loggedUser.name, loggedUser.password);\r\n        if (type === \"question\") {\r\n\r\n            if (ud === \"up\") {\r\n\r\n                QuestionPresenterInstance.uVote({ title: question.title, body: question.body, creationTime: question.createTime, author: question.author, upvotes: question.upvotes, downvotes: question.downvotes, tags: question.tags },client).then(\r\n                    foundQuestions => {\r\n                        var q = foundQuestions.filter(element => element.title === question.title && element.body === question.body && element.author === question.author);\r\n                        setQuestion({\r\n                            ...q[0]\r\n                        }\r\n                        )\r\n                    }\r\n                )\r\n            } else {\r\n                if (ud === \"down\") {\r\n                    QuestionPresenterInstance.dVote({ title: question.title, body: question.body, creationTime: question.createTime, author: \"\", upvotes: question.upvotes, downvotes: question.downvotes, tags: question.tags }, client).then(\r\n                        foundQuestions => {\r\n                            var q = foundQuestions.filter(element => element.title === question.title && element.body === question.body && element.author === question.author);\r\n                            setQuestion({\r\n                                ...q[0]\r\n                            }\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        } else {\r\n                if (ud === \"up\") {\r\n                    AnswarePresenterInstance.upvote(index).then(foundAnswares => {\r\n                        setAnswares({\r\n                            answares: [...foundAnswares]\r\n                        }\r\n                        )\r\n                    });\r\n\r\n                } else {\r\n                    if (ud === \"down\") {\r\n                        AnswarePresenterInstance.downvote(index).then(foundAnswares => {\r\n                            setAnswares({\r\n                                answares: [...foundAnswares]\r\n                            }\r\n                            )\r\n                        });\r\n                    }\r\n                }\r\n           \r\n        }\r\n    }\r\n\r\n    return (<ViewQuestion title={question.title}\r\n        body={question.body}\r\n        createTime={question.createTime}\r\n        tags={question.tags}\r\n        answares={answares.answares}\r\n        text={text.text}\r\n        onChangeTextArea={onChangeTextArea}\r\n        onAddAnsware={onAddAnsware}\r\n        onOpenEditAnsware={onOpenEditAnsware}\r\n        onEditAnsware={onEditAnsware}\r\n        onChAnsware={onChAnsware}\r\n        onVote={onVote}\r\n        upvotes={question.upvotes}\r\n        downvotes={question.downvotes}\r\n    />\r\n    );\r\n};\r\nexport default SmartViewQuestion\r\n"]},"metadata":{},"sourceType":"module"}