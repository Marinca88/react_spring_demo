{"ast":null,"code":"const BASE_URL = \"http://localhost:8080\";\n\nclass RestClient {\n  constructor(username, password) {\n    this.loadAllStudents = () => {\n      return fetch(`${BASE_URL}/stackoverflow`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadSerachedQuestions = text => {\n      return fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAnswaresForQuestion = id => {\n      return fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllAnswares = () => {\n      return fetch(`${BASE_URL}/stackoverflow/allAnswares`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.editAnsware = (id, text) => {\n      return fetch(`${BASE_URL}/stackoverflow/updateAnsware${id}?text=${text}`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllTags = () => {\n      return fetch(`${BASE_URL}/stackoverflow/allTags`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadRefreshedAnswares = (upvotes, downvotes, text, question_id) => {\n      return fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes,\n          \"text\": text,\n          \"creation_date\": \"date\",\n          \"question_id\": question_id,\n          \"author\": \"author\"\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.createQuestion = question => {\n      console.log(question.title);\n      console.log(question.body);\n      console.log(question.tags);\n      debugger;\n      return fetch(`${BASE_URL}/stackoverflow/createQuestion`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"title\": question.title,\n          \"body\": question.body,\n          \"createTime\": question.createTime,\n          \"author\": question.author,\n          \"tags\": question.tags,\n          \"upvotes\": question.upvotes,\n          \"downvotes\": question.downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.createTag = tag => {\n      return fetch(`${BASE_URL}/stackoverflow/createTag`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"text\": tag.text\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.authorization = \"Basic \" + btoa(username + \":\" + password);\n  }\n\n}\n\nexport default RestClient;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/rest/RestClient.js"],"names":["BASE_URL","RestClient","constructor","username","password","loadAllStudents","fetch","method","headers","authorization","then","response","json","loadSerachedQuestions","text","loadUpdatedQuestion","title","body","createTime","author","upvotes","downvotes","tags","console","log","JSON","stringify","loadUpdatedDownQuestion","loadAnswaresForQuestion","id","loadAllAnswares","editAnsware","loadAllTags","loadRefreshedAnswares","question_id","createQuestion","question","createTag","tag","btoa"],"mappings":"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","sourcesContent":["const BASE_URL = \"http://localhost:8080\";\r\nclass RestClient {\r\n\tconstructor(username, password) {\r\n\t\tthis.authorization = \"Basic \" + btoa(username + \":\" + password);\r\n\t}\r\n\r\n\tloadAllStudents = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadSerachedQuestions = (text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\":downvotes\r\n            }),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAnswaresForQuestion = (id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAllAnswares = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/allAnswares`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json()\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\teditAnsware = (id,text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/updateAnsware${id}?text=${text}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAllTags = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/allTags`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json()\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tloadRefreshedAnswares = (upvotes,downvotes,text,question_id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes,\r\n\t\t\t\t\"text\": text,\r\n\t\t\t\t\"creation_date\":\"date\",\r\n\t\t\t\t\"question_id\": question_id,\r\n\t\t\t\t\"author\": \"author\"\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcreateQuestion = (question) => {\r\n\t\tconsole.log(question.title)\r\n\t\tconsole.log(question.body)\r\n\t\tconsole.log(question.tags)\r\n\t\tdebugger\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createQuestion`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": question.title,\r\n\t\t\t\t\"body\": question.body,\r\n\t\t\t\t\"createTime\": question.createTime,\r\n\t\t\t\t\"author\": question.author,\r\n\t\t\t\t\"tags\": question.tags,\r\n\t\t\t\t\"upvotes\": question.upvotes,\r\n\t\t\t\t\"downvotes\": question.downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tcreateTag = (tag) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createTag`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"text\": tag.text\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\nexport default RestClient;"]},"metadata":{},"sourceType":"module"}