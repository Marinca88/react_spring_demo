{"ast":null,"code":"import QuestionInstance from '../model/Question';\nimport RestClient from '../rest/RestClient';\nconst client = new RestClient(\"username1\", \"password\");\n\nclass QuestionPresenter {\n  addTagToQuestion(index, tag) {\n    return QuestionInstance.addTagToQuestion(index, tag);\n  }\n\n  async addQuestion(newQuestion) {\n    var message = await client.createQuestion(newQuestion);\n  }\n\n  async getQuestion() {\n    var questions = await client.loadAllStudents();\n    QuestionInstance.addQuestion(questions);\n    return QuestionInstance.getQuestion();\n  }\n\n  async getQuestionByText(text) {\n    var questions = await client.loadSerachedQuestions(text);\n    QuestionInstance.removeQuetions();\n    QuestionInstance.addQuestion(questions);\n    return QuestionInstance.getQuestion();\n  }\n\n  async getQuestionById(id) {\n    var questions = await client.loadAllStudents();\n    return questions[id];\n  }\n\n  async upvote(question) {\n    var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\n    console.log(message.message);\n\n    if (message.message === \"Voted\") {\n      return QuestionInstance.upvote(question);\n    } else {\n      return QuestionInstance.getQuestion();\n    }\n  }\n\n  async downvote(question) {\n    var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\n    console.log(message.message);\n\n    if (message.message === \"Voted\") {\n      return QuestionInstance.downvote(question);\n    } else {\n      return QuestionInstance.getQuestion();\n    }\n  }\n\n  getVotes(index) {\n    return QuestionInstance.getVotes(index);\n  }\n\n}\n\nconst QuestionPresenterInstance = new QuestionPresenter();\nexport default QuestionPresenterInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/presenter/QuestionPresenter.js"],"names":["QuestionInstance","RestClient","client","QuestionPresenter","addTagToQuestion","index","tag","addQuestion","newQuestion","message","createQuestion","getQuestion","questions","loadAllStudents","getQuestionByText","text","loadSerachedQuestions","removeQuetions","getQuestionById","id","upvote","question","loadUpdatedQuestion","title","body","createTime","author","upvotes","downvotes","tags","console","log","downvote","getVotes","QuestionPresenterInstance"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,MAAMC,MAAM,GAAG,IAAID,UAAJ,CAAe,WAAf,EAA4B,UAA5B,CAAf;;AACA,MAAME,iBAAN,CAAuB;AAEnBC,EAAAA,gBAAgB,CAACC,KAAD,EAAQC,GAAR,EAAa;AACzB,WAAON,gBAAgB,CAACI,gBAAjB,CAAkCC,KAAlC,EAAyCC,GAAzC,CAAP;AACH;;AACgB,QAAXC,WAAW,CAACC,WAAD,EAAc;AAC3B,QAAIC,OAAO,GAAG,MAAMP,MAAM,CAACQ,cAAP,CAAsBF,WAAtB,CAApB;AACH;;AACgB,QAAXG,WAAW,GAAG;AAChB,QAAIC,SAAS,GAAG,MAAMV,MAAM,CAACW,eAAP,EAAtB;AACAb,IAAAA,gBAAgB,CAACO,WAAjB,CAA6BK,SAA7B;AACA,WAAOZ,gBAAgB,CAACW,WAAjB,EAAP;AACH;;AAEsB,QAAjBG,iBAAiB,CAACC,IAAD,EAAO;AAC1B,QAAIH,SAAS,GAAG,MAAMV,MAAM,CAACc,qBAAP,CAA6BD,IAA7B,CAAtB;AACAf,IAAAA,gBAAgB,CAACiB,cAAjB;AACAjB,IAAAA,gBAAgB,CAACO,WAAjB,CAA6BK,SAA7B;AACA,WAAOZ,gBAAgB,CAACW,WAAjB,EAAP;AACH;;AAEoB,QAAfO,eAAe,CAACC,EAAD,EAAK;AACtB,QAAIP,SAAS,GAAG,MAAMV,MAAM,CAACW,eAAP,EAAtB;AACA,WAAOD,SAAS,CAACO,EAAD,CAAhB;AAEH;;AAEW,QAANC,MAAM,CAACC,QAAD,EAAW;AAEnB,QAAIZ,OAAO,GAAG,MAAMP,MAAM,CAACoB,mBAAP,CAA2BD,QAAQ,CAACE,KAApC,EAA2CF,QAAQ,CAACG,IAApD,EAA0DH,QAAQ,CAACI,UAAnE,EAA+EJ,QAAQ,CAACK,MAAxF,EAAgGL,QAAQ,CAACM,OAAzG,EAAkHN,QAAQ,CAACO,SAA3H,EAAsIP,QAAQ,CAACQ,IAA/I,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYtB,OAAO,CAACA,OAApB;;AACA,QAAIA,OAAO,CAACA,OAAR,KAAoB,OAAxB,EAAiC;AAC7B,aAAOT,gBAAgB,CAACoB,MAAjB,CAAwBC,QAAxB,CAAP;AACH,KAFD,MAEO;AACH,aAAOrB,gBAAgB,CAACW,WAAjB,EAAP;AACH;AACJ;;AAEa,QAARqB,QAAQ,CAACX,QAAD,EAAW;AACrB,QAAIZ,OAAO,GAAG,MAAMP,MAAM,CAACoB,mBAAP,CAA2BD,QAAQ,CAACE,KAApC,EAA2CF,QAAQ,CAACG,IAApD,EAA0DH,QAAQ,CAACI,UAAnE,EAA+EJ,QAAQ,CAACK,MAAxF,EAAgGL,QAAQ,CAACM,OAAzG,EAAkHN,QAAQ,CAACO,SAA3H,EAAsIP,QAAQ,CAACQ,IAA/I,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYtB,OAAO,CAACA,OAApB;;AACA,QAAIA,OAAO,CAACA,OAAR,KAAoB,OAAxB,EAAiC;AAC7B,aAAOT,gBAAgB,CAACgC,QAAjB,CAA0BX,QAA1B,CAAP;AACH,KAFD,MAEO;AACH,aAAOrB,gBAAgB,CAACW,WAAjB,EAAP;AACH;AACJ;;AAEDsB,EAAAA,QAAQ,CAAC5B,KAAD,EAAQ;AACZ,WAAOL,gBAAgB,CAACiC,QAAjB,CAA0B5B,KAA1B,CAAP;AACH;;AAlDkB;;AAoDvB,MAAM6B,yBAAyB,GAAG,IAAI/B,iBAAJ,EAAlC;AACA,eAAe+B,yBAAf","sourcesContent":["import QuestionInstance from '../model/Question';\r\nimport RestClient from '../rest/RestClient';\r\n\r\nconst client = new RestClient(\"username1\", \"password\");\r\nclass QuestionPresenter{\r\n\r\n    addTagToQuestion(index, tag) {\r\n        return QuestionInstance.addTagToQuestion(index, tag);\r\n    }\r\n    async addQuestion(newQuestion) {\r\n        var message = await client.createQuestion(newQuestion);\r\n    }\r\n    async getQuestion() {\r\n        var questions = await client.loadAllStudents();\r\n        QuestionInstance.addQuestion(questions);\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    async getQuestionByText(text) {\r\n        var questions = await client.loadSerachedQuestions(text);\r\n        QuestionInstance.removeQuetions();\r\n        QuestionInstance.addQuestion(questions);\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    async getQuestionById(id) {\r\n        var questions = await client.loadAllStudents();\r\n        return questions[id];\r\n\r\n    }\r\n\r\n    async upvote(question) {\r\n        \r\n        var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\r\n        console.log(message.message);\r\n        if (message.message === \"Voted\") {\r\n            return QuestionInstance.upvote(question);\r\n        } else {\r\n            return QuestionInstance.getQuestion();\r\n        }\r\n    }\r\n\r\n    async downvote(question) {\r\n        var message = await client.loadUpdatedQuestion(question.title, question.body, question.createTime, question.author, question.upvotes, question.downvotes, question.tags);\r\n        console.log(message.message);\r\n        if (message.message === \"Voted\") {\r\n            return QuestionInstance.downvote(question);\r\n        } else {\r\n            return QuestionInstance.getQuestion();\r\n        }\r\n    }\r\n\r\n    getVotes(index) {\r\n        return QuestionInstance.getVotes(index);\r\n    }\r\n}\r\nconst QuestionPresenterInstance = new QuestionPresenter();\r\nexport default QuestionPresenterInstance;"]},"metadata":{},"sourceType":"module"}