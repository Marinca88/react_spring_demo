{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iasmina\\\\Desktop\\\\a2\\\\assigenemnt2\\\\src\\\\container\\\\SmrtViewQuestion.js\",\n    _s = $RefreshSig$();\n\nimport ViewQuestion from '../presentational/ViewQuestion';\nimport AnswarePresenterInstance from '../presenter/AnswarePresenter';\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter';\nimport AppPresenterInstance from '../presenter/AppPresenter';\nimport VotesPresenterInstance from '../presenter/VotesPresenter';\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmartViewQuestion() {\n  _s();\n\n  const [question, setQuestion] = useState({\n    title: \"\",\n    body: \"\",\n    tags: [],\n    createTime: \"\",\n    upvotes: 0,\n    downvotes: 0\n  });\n  const [editedValue, setEdit] = useState({\n    text: \"\"\n  });\n  const [varQuestions, setVarQuestions] = useState({\n    questions: []\n  });\n  const {\n    index\n  } = useParams();\n  const [text, setText] = useState({\n    text: \"\",\n    authorUsername: \"username1\",\n    referenceQuestion: index,\n    upvotes: 0,\n    downvotes: 0\n  });\n  const [chAnsware, setChAnsware] = useState({\n    text: \"\"\n  });\n\n  const onChAnsware = newValue => {\n    setChAnsware({\n      text: newValue\n    });\n  };\n\n  const [answares, setAnswares] = useState({\n    answares: []\n  });\n  useEffect(() => {\n    QuestionPresenterInstance.getQuestionById(index).then(foundQuestion => {\n      setQuestion({ ...foundQuestion\n      });\n    });\n    AnswarePresenterInstance.getAnswaresForQuestion(index).then(foundAnswares => {\n      setAnswares({\n        answares: [...foundAnswares]\n      });\n    });\n  }, []);\n\n  const onChangeTextArea = (property, newValue) => {\n    setText({ ...text,\n      [property]: newValue\n    });\n  };\n\n  const onAddAnsware = () => {\n    AnswarePresenterInstance.addAnsware(text).then(foundAnswares => {\n      setAnswares({\n        answares: [...foundAnswares]\n      });\n    });\n  };\n\n  const onOpenEditAnsware = (proprety, newValue) => {\n    setText({ ...text,\n      [proprety]: newValue\n    });\n    setEdit({\n      text: newValue\n    });\n  };\n\n  const onEditAnsware = () => {\n    var answaresi = AnswarePresenterInstance.getAnswares();\n    var ind = answaresi.indexOf(answaresi.find(element => element.text === chAnsware.text));\n    console.log(ind);\n    AnswarePresenterInstance.editAnsware(text, editedValue.text).then(foundAnswares => {\n      setAnswares({\n        answares: [...foundAnswares]\n      });\n    });\n  };\n\n  const onVote = (ud, type, text) => {\n    console.log(ud);\n    console.log(type);\n\n    if (type === \"question\") {\n      if (ud === \"up\") {\n        console.log(question.title);\n        var founQuestions = QuestionPresenterInstance.upvote({\n          title: question.title,\n          body: question.body,\n          creationTime: question.createTime,\n          author: \"\",\n          upvotes: question.upvotes,\n          downvotes: question.downvotes,\n          tags: question.tags\n        });\n        console.log(founQuestions);\n        var upvotes = founQuestions.find(element => element.title == question.title && element.body == question.body).upvotes;\n        setQuestion({ ...question,\n          upvotes: upvotes\n        });\n      } else {\n        if (ud === \"down\") {\n          var founQuestions = QuestionPresenterInstance.upvote({\n            title: question.title,\n            body: question.body,\n            creationTime: question.createTime,\n            author: \"\",\n            upvotes: question.upvotes,\n            downvotes: question.downvotes,\n            tags: question.tags\n          });\n          var downvotes = founQuestions.find(element => element.title == question.title && element.body == question.body).downvotes;\n          setQuestion({ ...question,\n            downvotes: downvotes\n          });\n        }\n      }\n    } else {\n      var userVotes = VotesPresenterInstance.getVotesBy(\"Username1\");\n      var vote = userVotes.find(item => item.id === index && item.type === \"question\");\n\n      if (vote === undefined) {\n        if (ud === \"up\") {\n          console.log(\"am ajuns aici pt up question \");\n          QuestionPresenterInstance.upvote(index);\n          VotesPresenterInstance.addVote({\n            user: \"Username1\",\n            type: \"question\",\n            id: index\n          });\n          setQuestion(QuestionPresenterInstance.getQuestionById(index));\n        } else {\n          if (ud === \"down\") {\n            console.log(\"am ajuns aici pt down question\");\n            QuestionPresenterInstance.downvote(index);\n            VotesPresenterInstance.addVote({\n              user: \"Username1\",\n              type: \"question\",\n              id: index\n            });\n            setQuestion(QuestionPresenterInstance.getQuestionById(index));\n          }\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ViewQuestion, {\n    title: question.title,\n    body: question.body,\n    createTime: question.createTime,\n    tags: question.tags,\n    answares: answares.answares,\n    text: text.text,\n    onChangeTextArea: onChangeTextArea,\n    onAddAnsware: onAddAnsware,\n    onOpenEditAnsware: onOpenEditAnsware,\n    onEditAnsware: onEditAnsware,\n    onChAnsware: onChAnsware,\n    onVote: onVote,\n    upvotes: question.upvotes,\n    downvotes: question.downvotes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 13\n  }, this);\n}\n\n_s(SmartViewQuestion, \"G4Nk+IBKwGk4QN9DhYaWMQDurEI=\", false, function () {\n  return [useParams];\n});\n\n_c = SmartViewQuestion;\n;\nexport default SmartViewQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmartViewQuestion\");","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/container/SmrtViewQuestion.js"],"names":["ViewQuestion","AnswarePresenterInstance","QuestionPresenterInstance","AppPresenterInstance","VotesPresenterInstance","useEffect","useState","useParams","moment","SmartViewQuestion","question","setQuestion","title","body","tags","createTime","upvotes","downvotes","editedValue","setEdit","text","varQuestions","setVarQuestions","questions","index","setText","authorUsername","referenceQuestion","chAnsware","setChAnsware","onChAnsware","newValue","answares","setAnswares","getQuestionById","then","foundQuestion","getAnswaresForQuestion","foundAnswares","onChangeTextArea","property","onAddAnsware","addAnsware","onOpenEditAnsware","proprety","onEditAnsware","answaresi","getAnswares","ind","indexOf","find","element","console","log","editAnsware","onVote","ud","type","founQuestions","upvote","creationTime","author","userVotes","getVotesBy","vote","item","id","undefined","addVote","user","downvote"],"mappings":"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","sourcesContent":["import ViewQuestion from '../presentational/ViewQuestion'\r\nimport AnswarePresenterInstance from '../presenter/AnswarePresenter'\r\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter'\r\nimport AppPresenterInstance from '../presenter/AppPresenter'\r\nimport VotesPresenterInstance from '../presenter/VotesPresenter'\r\nimport { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport moment from 'moment'\r\n\r\n\r\nfunction SmartViewQuestion() {\r\n    const [question, setQuestion] = useState({\r\n        title: \"\",\r\n        body: \"\",\r\n        tags: [],\r\n        createTime: \"\",\r\n        upvotes: 0,\r\n        downvotes: 0\r\n    });\r\n\r\n    const [editedValue, setEdit] = useState({\r\n        text: \"\"\r\n    });\r\n\r\n    const [varQuestions, setVarQuestions] = useState({\r\n        questions:[]\r\n    });\r\n    const { index } = useParams();\r\n\r\n    const [text, setText] = useState({\r\n        text: \"\",\r\n        authorUsername: \"username1\",\r\n        referenceQuestion: index,\r\n        upvotes: 0,\r\n        downvotes:0\r\n    });\r\n\r\n    const [chAnsware, setChAnsware] = useState({\r\n        text: \"\"\r\n    });\r\n\r\n    const onChAnsware = (newValue) => {\r\n        setChAnsware({\r\n            text:newValue\r\n        });\r\n    }\r\n\r\n    const [answares, setAnswares] = useState({\r\n        answares: []\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        QuestionPresenterInstance.getQuestionById(index).then(foundQuestion => {\r\n            setQuestion({\r\n                ...foundQuestion\r\n            }\r\n            )\r\n        });\r\n        AnswarePresenterInstance.getAnswaresForQuestion(index).then(foundAnswares => {\r\n            setAnswares({\r\n                answares:[...foundAnswares]\r\n            }\r\n            )\r\n        });\r\n    }, []);\r\n\r\n\r\n    const onChangeTextArea = (property, newValue) => {\r\n        setText({\r\n            ...text,\r\n            [property]: newValue\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const onAddAnsware = () => {\r\n        AnswarePresenterInstance.addAnsware(text).then(foundAnswares => {\r\n            setAnswares({\r\n                answares: [...foundAnswares]\r\n            }\r\n            )\r\n        });\r\n        \r\n    }\r\n\r\n    const onOpenEditAnsware = (proprety,newValue) => {\r\n        setText({\r\n            ...text,\r\n            [proprety]: newValue\r\n        });\r\n        setEdit({\r\n            text: newValue\r\n        });\r\n    }\r\n\r\n    const onEditAnsware = () => {\r\n        var answaresi = AnswarePresenterInstance.getAnswares()\r\n        var ind = answaresi.indexOf(answaresi.find(element => element.text === chAnsware.text))\r\n        console.log(ind)\r\n        AnswarePresenterInstance.editAnsware(text,editedValue.text).then(foundAnswares => {\r\n            setAnswares({\r\n                answares: [...foundAnswares]\r\n            }\r\n            )\r\n        });\r\n        \r\n    }\r\n\r\n    const onVote = (ud, type, text) => {\r\n        console.log(ud)\r\n        console.log(type)\r\n        if (type === \"question\") {\r\n\r\n            if (ud === \"up\") {\r\n                console.log(question.title)\r\n                var founQuestions = QuestionPresenterInstance.upvote({ title: question.title, body: question.body, creationTime: question.createTime, author: \"\", upvotes: question.upvotes, downvotes: question.downvotes, tags: question.tags })\r\n                console.log(founQuestions)\r\n                var upvotes = founQuestions.find(element => element.title == question.title && element.body == question.body).upvotes\r\n                setQuestion({\r\n                    ...question,\r\n                    upvotes: upvotes\r\n                })\r\n            } else {\r\n                if (ud === \"down\") {\r\n                    var founQuestions = QuestionPresenterInstance.upvote({ title: question.title, body: question.body, creationTime: question.createTime, author: \"\", upvotes: question.upvotes, downvotes: question.downvotes, tags: question.tags })\r\n                    var downvotes = founQuestions.find(element => element.title == question.title && element.body == question.body).downvotes\r\n                    setQuestion({\r\n                        ...question,\r\n                        downvotes: downvotes\r\n                    })\r\n\r\n                }\r\n            }\r\n        } else {\r\n            var userVotes = VotesPresenterInstance.getVotesBy(\"Username1\")\r\n            var vote = userVotes.find(item => item.id === index && item.type === \"question\")\r\n            if (vote === undefined) {\r\n                if (ud === \"up\") {\r\n                    console.log(\"am ajuns aici pt up question \")\r\n                    QuestionPresenterInstance.upvote(index)\r\n                    VotesPresenterInstance.addVote({\r\n                        user: \"Username1\",\r\n                        type: \"question\",\r\n                        id: index\r\n                    });\r\n                    setQuestion(QuestionPresenterInstance.getQuestionById(index))\r\n\r\n                } else {\r\n                    if (ud === \"down\") {\r\n                        console.log(\"am ajuns aici pt down question\")\r\n                        QuestionPresenterInstance.downvote(index)\r\n\r\n                        VotesPresenterInstance.addVote({\r\n                            user: \"Username1\",\r\n                            type: \"question\",\r\n                            id: index\r\n                        });\r\n                        setQuestion(QuestionPresenterInstance.getQuestionById(index))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<ViewQuestion title={question.title}\r\n        body={question.body}\r\n        createTime={question.createTime}\r\n        tags={question.tags}\r\n        answares={answares.answares}\r\n        text={text.text}\r\n        onChangeTextArea={onChangeTextArea}\r\n        onAddAnsware={onAddAnsware}\r\n        onOpenEditAnsware={onOpenEditAnsware}\r\n        onEditAnsware={onEditAnsware}\r\n        onChAnsware={onChAnsware}\r\n        onVote={onVote}\r\n        upvotes={question.upvotes}\r\n        downvotes={question.downvotes}\r\n    />\r\n    );\r\n};\r\nexport default SmartViewQuestion\r\n"]},"metadata":{},"sourceType":"module"}