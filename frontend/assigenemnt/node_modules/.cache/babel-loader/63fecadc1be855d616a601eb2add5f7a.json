{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport WebSocketListenerInstance from \"../ws/WebSocketListener\";\n\nclass Question extends EventEmitter {\n  constructor() {\n    super();\n    this.state = {\n      questions: []\n    };\n    WebSocketListenerInstance.on(\"QUESTION_UPDATED\", event => {\n      QuestionInstance.upvote(event.questionDto);\n      this.emit(\"q_updated\", this.state.questions);\n    });\n  }\n\n  addTagToQuestion(index, tag) {\n    this.state.questions[index].tags = [...this.state.questions[index].tags, tag];\n  }\n\n  addQuestion(questions) {\n    this.state.questions = [...questions];\n  }\n\n  getQuestion() {\n    return this.state.questions;\n  }\n\n  removeQuetions() {\n    this.state.questions = [];\n  }\n\n  getQuestionbyId(id) {\n    return this.state.questions[id];\n  }\n\n  upvote(question) {\n    var index = this.state.questions.indexOf(question);\n    this.state.questions[index].upvotes = this.state.questions[index].upvotes + 1;\n    return this.state.questions;\n  }\n\n  downvote(index) {\n    this.state.questions[index].downvotes = this.state.questions[index].downvotes + 1;\n  }\n\n  getVotes(index) {\n    var votes = this.state.questions[index].upvotes - this.state.questions[index].downvotes;\n    return votes;\n  }\n\n}\n\nconst QuestionInstance = new Question();\nexport default QuestionInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/model/Question.js"],"names":["EventEmitter","WebSocketListenerInstance","Question","constructor","state","questions","on","event","QuestionInstance","upvote","questionDto","emit","addTagToQuestion","index","tag","tags","addQuestion","getQuestion","removeQuetions","getQuestionbyId","id","question","indexOf","upvotes","downvote","downvotes","getVotes","votes"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,yBAAP,MAAsC,yBAAtC;;AAEA,MAAMC,QAAN,SAAuBF,YAAvB,CAAmC;AAC/BG,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAGAJ,IAAAA,yBAAyB,CAACK,EAA1B,CAA6B,kBAA7B,EAAiDC,KAAK,IAAI;AACtDC,MAAAA,gBAAgB,CAACC,MAAjB,CAAwBF,KAAK,CAACG,WAA9B;AACA,WAAKC,IAAL,CAAU,WAAV,EAAuB,KAAKP,KAAL,CAAWC,SAAlC;AACH,KAHD;AAIH;;AAEDO,EAAAA,gBAAgB,CAACC,KAAD,EAAOC,GAAP,EAAY;AACxB,SAAKV,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BE,IAA5B,GAAmC,CAC/B,GAAG,KAAKX,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BE,IADA,EAE/BD,GAF+B,CAAnC;AAIH;;AAEDE,EAAAA,WAAW,CAACX,SAAD,EAAY;AACnB,SAAKD,KAAL,CAAWC,SAAX,GAAuB,CACnB,GAAGA,SADgB,CAAvB;AAGH;;AAEDY,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKb,KAAL,CAAWC,SAAlB;AACH;;AAEDa,EAAAA,cAAc,GAAG;AACb,SAAKd,KAAL,CAAWC,SAAX,GAAuB,EAAvB;AACH;;AAGDc,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAO,KAAKhB,KAAL,CAAWC,SAAX,CAAqBe,EAArB,CAAP;AACH;;AAEDX,EAAAA,MAAM,CAACY,QAAD,EAAW;AACb,QAAIR,KAAK,GAAG,KAAKT,KAAL,CAAWC,SAAX,CAAqBiB,OAArB,CAA6BD,QAA7B,CAAZ;AACA,SAAKjB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAA5B,GAAsC,KAAKnB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAA5B,GAAsC,CAA5E;AACA,WAAO,KAAKnB,KAAL,CAAWC,SAAlB;AAEH;;AAEDmB,EAAAA,QAAQ,CAACX,KAAD,EAAQ;AACZ,SAAKT,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BY,SAA5B,GAAwC,KAAKrB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BY,SAA5B,GAAwC,CAAhF;AACH;;AAEDC,EAAAA,QAAQ,CAACb,KAAD,EAAQ;AACZ,QAAIc,KAAK,GAAG,KAAKvB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BU,OAA5B,GAAsC,KAAKnB,KAAL,CAAWC,SAAX,CAAqBQ,KAArB,EAA4BY,SAA9E;AACA,WAAOE,KAAP;AACH;;AApD8B;;AAsDnC,MAAMnB,gBAAgB,GAAG,IAAIN,QAAJ,EAAzB;AACA,eAAeM,gBAAf","sourcesContent":["import { EventEmitter } from \"events\"\r\nimport WebSocketListenerInstance from \"../ws/WebSocketListener\"\r\n\r\nclass Question extends EventEmitter{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            questions: []\r\n        };\r\n        WebSocketListenerInstance.on(\"QUESTION_UPDATED\", event => {\r\n            QuestionInstance.upvote(event.questionDto);\r\n            this.emit(\"q_updated\", this.state.questions);\r\n        })\r\n    }\r\n\r\n    addTagToQuestion(index,tag) {\r\n        this.state.questions[index].tags = [\r\n            ...this.state.questions[index].tags,\r\n            tag\r\n        ];\r\n    }\r\n\r\n    addQuestion(questions) {\r\n        this.state.questions = [\r\n            ...questions\r\n        ];\r\n    }\r\n\r\n    getQuestion() {\r\n        return this.state.questions;\r\n    }\r\n\r\n    removeQuetions() {\r\n        this.state.questions = [];\r\n    }\r\n\r\n\r\n    getQuestionbyId(id) {\r\n        return this.state.questions[id];\r\n    }\r\n\r\n    upvote(question) {\r\n        var index = this.state.questions.indexOf(question);\r\n        this.state.questions[index].upvotes = this.state.questions[index].upvotes + 1;\r\n        return this.state.questions;\r\n\r\n    }\r\n\r\n    downvote(index) {\r\n        this.state.questions[index].downvotes = this.state.questions[index].downvotes + 1\r\n    }\r\n\r\n    getVotes(index) {\r\n        var votes = this.state.questions[index].upvotes - this.state.questions[index].downvotes\r\n        return votes\r\n    }\r\n}\r\nconst QuestionInstance = new Question();\r\nexport default QuestionInstance;"]},"metadata":{},"sourceType":"module"}