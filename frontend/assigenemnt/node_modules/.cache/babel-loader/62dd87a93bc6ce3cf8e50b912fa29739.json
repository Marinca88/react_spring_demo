{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iasmina\\\\Desktop\\\\a2\\\\assigenemnt2\\\\src\\\\container\\\\SmartCreateQuestion.js\",\n    _s = $RefreshSig$();\n\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter';\nimport TagPresenterInstance from '../presenter/TagPresenter';\nimport CreateQuestion from '../presentational/CreateQuestion';\nimport { useEffect, useState } from 'react';\nimport RestClient from '../rest/RestClient';\nimport AppPresenter from '../presenter/AppPresenter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmartCreateQuestion() {\n  _s();\n\n  const [question, setQuestion] = useState({\n    title: \"\",\n    body: \"\",\n    author: \"\",\n    createTime: \"\",\n    tags: [\"hello\"],\n    upvotes: 0,\n    downvotes: 0\n  });\n  const [loggedUser, setLoggedUser] = useState({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    score: 0,\n    username: \"\"\n  });\n  const [tagText, setTagText] = useState({\n    text: \"\"\n  });\n  const [allTags, setTags] = useState({\n    tags: []\n  });\n  useEffect(() => {\n    AppPresenter.getLoggedUser().then(lgdUser => {\n      if (lgdUser.name === \"\" && lgdUser.password === \"\") {\n        window.location.assign(\"#/error\");\n      }\n\n      const client = new RestClient(lgdUser.name, lgdUser.password);\n      TagPresenterInstance.getTags(client).then(foundQuestions => {\n        setTags({\n          tags: [...foundQuestions]\n        });\n      });\n      setLoggedUser({ ...lgdUser\n      });\n    });\n  }, []);\n\n  const onChange = (property, newValue) => {\n    setQuestion({ ...question,\n      [property]: newValue\n    });\n  };\n\n  const onChangeTagText = newValue => {\n    setTagText({\n      text: newValue\n    });\n  };\n\n  const onSaveNewTag = () => {\n    const client = new RestClient(loggedUser.name, loggedUser.password);\n    TagPresenterInstance.saveTag(tagText, client).then(foundQuestions => {\n      setTags({\n        tags: [...foundQuestions]\n      });\n    });\n    setQuestion({ ...question,\n      tags: [...question.tags, tagText.text]\n    });\n  };\n\n  const onAddTag = tag => {\n    setQuestion({ ...question,\n      tags: [...question.tags, tag]\n    });\n  };\n\n  const onRemoveTag = tag => {\n    console.log(tag);\n    var tgs = question.tags;\n    tgs.splice(tgs.indexOf(tag), 1);\n    setQuestion({ ...question,\n      tags: tgs\n    });\n  };\n\n  const onSave = () => {\n    const client = new RestClient(loggedUser.name, loggedUser.password);\n    QuestionPresenterInstance.addQuestion(question, client);\n    window.location.assign(\"#/home\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(CreateQuestion, {\n    title: question.title,\n    body: question.body,\n    tags: question.tags,\n    allTags: allTags.tags,\n    onChange: onChange,\n    onRemoveTag: onRemoveTag,\n    onAddTag: onAddTag,\n    onSave: onSave,\n    onChangeTagText: onChangeTagText,\n    onSaveNewTag: onSaveNewTag,\n    nwTag: tagText.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 13\n  }, this);\n}\n\n_s(SmartCreateQuestion, \"DFTxjMfd43KyD42s0Iqw+olZayw=\");\n\n_c = SmartCreateQuestion;\nexport default SmartCreateQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmartCreateQuestion\");","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/container/SmartCreateQuestion.js"],"names":["QuestionPresenterInstance","TagPresenterInstance","CreateQuestion","useEffect","useState","RestClient","AppPresenter","SmartCreateQuestion","question","setQuestion","title","body","author","createTime","tags","upvotes","downvotes","loggedUser","setLoggedUser","email","name","password","score","username","tagText","setTagText","text","allTags","setTags","getLoggedUser","then","lgdUser","window","location","assign","client","getTags","foundQuestions","onChange","property","newValue","onChangeTagText","onSaveNewTag","saveTag","onAddTag","tag","onRemoveTag","console","log","tgs","splice","indexOf","onSave","addQuestion"],"mappings":"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","sourcesContent":["import QuestionPresenterInstance from '../presenter/QuestionPresenter'\r\nimport TagPresenterInstance from '../presenter/TagPresenter'\r\nimport CreateQuestion from '../presentational/CreateQuestion'\r\nimport { useEffect, useState } from 'react';\r\nimport RestClient from '../rest/RestClient';\r\nimport AppPresenter from '../presenter/AppPresenter'\r\n\r\nfunction SmartCreateQuestion() {\r\n    const [question, setQuestion] = useState({\r\n        title: \"\",\r\n        body: \"\",\r\n        author: \"\",\r\n        createTime: \"\",\r\n        tags: [\"hello\"],\r\n        upvotes: 0,\r\n        downvotes: 0\r\n    });\r\n\r\n    const [loggedUser, setLoggedUser] = useState({\r\n        email: \"\",\r\n        name: \"\",\r\n        password: \"\",\r\n        score: 0,\r\n        username: \"\"\r\n    })\r\n\r\n    const [tagText, setTagText] = useState({\r\n        text: \"\"\r\n    });\r\n\r\n    const [allTags, setTags] = useState({\r\n        tags: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        AppPresenter.getLoggedUser().then(lgdUser => {\r\n            if (lgdUser.name === \"\" && lgdUser.password === \"\") {\r\n                window.location.assign(\"#/error\");\r\n            }\r\n            const client = new RestClient(lgdUser.name, lgdUser.password);\r\n            TagPresenterInstance.getTags(client).then(foundQuestions => {\r\n                setTags({\r\n                    tags: [...foundQuestions]\r\n                })\r\n            });\r\n            setLoggedUser({\r\n                ...lgdUser\r\n            })\r\n        })\r\n    }, []);\r\n\r\n    const onChange = (property, newValue) => {\r\n        setQuestion({\r\n            ...question,\r\n            [property]: newValue\r\n        });\r\n    }\r\n\r\n    const onChangeTagText = (newValue) => {\r\n        setTagText({\r\n            text: newValue\r\n        });\r\n    }\r\n\r\n    const onSaveNewTag = () => {\r\n        const client = new RestClient(loggedUser.name, loggedUser.password);\r\n        TagPresenterInstance.saveTag(tagText,client).then(foundQuestions => {\r\n            setTags({\r\n                tags: [...foundQuestions]\r\n            })\r\n        });\r\n        setQuestion({\r\n            ...question,\r\n            tags: [...question.tags, tagText.text]\r\n        });\r\n    }\r\n\r\n    const onAddTag = (tag) => {\r\n        setQuestion({\r\n            ...question,\r\n            tags: [...question.tags, tag]\r\n        });\r\n    }\r\n\r\n    const onRemoveTag = (tag) => {\r\n        console.log(tag)\r\n        var tgs = question.tags;\r\n        tgs.splice(tgs.indexOf(tag), 1);\r\n        setQuestion({\r\n            ...question,\r\n            tags:tgs\r\n        });\r\n    }\r\n\r\n    const onSave = () => {\r\n        const client = new RestClient(loggedUser.name, loggedUser.password);\r\n        QuestionPresenterInstance.addQuestion(question,client);\r\n        window.location.assign(\"#/home\");\r\n    }\r\n\r\n    return (<CreateQuestion title={question.title} body={question.body} tags={question.tags} allTags={allTags.tags} onChange={onChange} onRemoveTag={onRemoveTag} onAddTag={onAddTag} onSave={onSave} onChangeTagText={onChangeTagText} onSaveNewTag={onSaveNewTag} nwTag={tagText.text} />\r\n    );\r\n}\r\nexport default SmartCreateQuestion;"]},"metadata":{},"sourceType":"module"}