{"ast":null,"code":"const BASE_URL = \"http://localhost:8080\";\n\nclass RestClient {\n  constructor(_username, _password) {\n    this.UpVotedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/uvoteQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.DownVotedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      return fetch(`${BASE_URL}/stackoverflow/dvoteQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUser = id => {\n      return fetch(`${BASE_URL}/stackoverflow/getUser${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.editUser = user => {\n      return fetch(`${BASE_URL}/stackoverflow/updateProfile`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"name\": user.username,\n          \"username\": \"admin\",\n          \"email\": \"login\",\n          \"password\": user.password,\n          \"score\": 0\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllStudents = () => {\n      console.log(this.authorization);\n      return fetch(`${BASE_URL}/stackoverflow`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadSerachedQuestions = text => {\n      return fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\n      console.log(tags);\n      return fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          \"title\": title,\n          \"body\": body,\n          \"author\": author,\n          \"tags\": tags,\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAnswaresForQuestion = id => {\n      return fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.upvoteAnsware = (id, questionId) => {\n      return fetch(`${BASE_URL}/stackoverflow/like${id}?questionId=${questionId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.downvoteAnsware = (id, questionId) => {\n      return fetch(`${BASE_URL}/stackoverflow/dislike${id}?questionId=${questionId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllAnswares = () => {\n      return fetch(`${BASE_URL}/stackoverflow/allAnswares`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.editAnsware = (id, text) => {\n      return fetch(`${BASE_URL}/stackoverflow/updateAnsware${id}?text=${text}`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadAllTags = () => {\n      return fetch(`${BASE_URL}/stackoverflow/allTags`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadRefreshedAnswares = (upvotes, downvotes, text, question_id) => {\n      return fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"upvotes\": upvotes,\n          \"downvotes\": downvotes,\n          \"text\": text,\n          \"creation_date\": \"date\",\n          \"question_id\": question_id,\n          \"author\": \"author\"\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.createQuestion = question => {\n      return fetch(`${BASE_URL}/stackoverflow/createQuestion`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"title\": question.title,\n          \"body\": question.body,\n          \"createTime\": question.createTime,\n          \"author\": question.author,\n          \"tags\": question.tags,\n          \"upvotes\": question.upvotes,\n          \"downvotes\": question.downvotes\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.loadLoginText = (username, password) => {\n      console.log(password);\n      return fetch(`${BASE_URL}/stackoverflow/log?username=${username}&password=${password}`, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    this.createTag = tag => {\n      return fetch(`${BASE_URL}/stackoverflow/createTag`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"text\": tag.text\n        }),\n        headers: {\n          \"Authorization\": this.authorization,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        return response.json();\n      });\n    };\n\n    console.log(_username);\n    console.log(_password);\n    this.authorization = \"Basic \" + btoa(_username + \":\" + _password);\n  }\n\n}\n\nexport default RestClient;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/rest/RestClient.js"],"names":["BASE_URL","RestClient","constructor","username","password","UpVotedQuestion","title","body","createTime","author","upvotes","downvotes","tags","console","log","fetch","method","JSON","stringify","headers","authorization","then","response","json","DownVotedQuestion","loadUser","id","editUser","user","loadAllStudents","loadSerachedQuestions","text","loadUpdatedQuestion","loadUpdatedDownQuestion","loadAnswaresForQuestion","upvoteAnsware","questionId","downvoteAnsware","loadAllAnswares","editAnsware","loadAllTags","loadRefreshedAnswares","question_id","createQuestion","question","loadLoginText","createTag","tag","btoa"],"mappings":"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","sourcesContent":["const BASE_URL = \"http://localhost:8080\";\r\nclass RestClient {\r\n\tconstructor(username, password) {\r\n\t\tconsole.log(username)\r\n\t\tconsole.log(password)\r\n\t\tthis.authorization = \"Basic \" + btoa(username + \":\" + password);\r\n\t}\r\n\r\n\tUpVotedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/uvoteQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tDownVotedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/dvoteQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUser = (id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/getUser${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\teditUser = (user) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/updateProfile`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"name\": user.username,\r\n\t\t\t\t\"username\": \"admin\",\r\n\t\t\t\t\"email\": \"login\",\r\n\t\t\t\t\"password\": user.password,\r\n\t\t\t\t\"score\": 0\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n    }\r\n\r\n\tloadAllStudents = () => {\r\n\t\tconsole.log(this.authorization)\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadSerachedQuestions = (text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/search?text=${text}`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/upvoteQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\":downvotes\r\n            }),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadUpdatedDownQuestion = (title, body, createTime, author, upvotes, downvotes, tags) => {\r\n\t\tconsole.log(tags);\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/downQuestion`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": title,\r\n\t\t\t\t\"body\": body,\r\n\t\t\t\t\"author\": author,\r\n\t\t\t\t\"tags\": tags,\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAnswaresForQuestion = (id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/questionAnswares${id}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tupvoteAnsware = (id, questionId) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/like${id}?questionId=${questionId}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tdownvoteAnsware = (id, questionId) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/dislike${id}?questionId=${questionId}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAllAnswares = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/allAnswares`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json()\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\teditAnsware = (id,text) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/updateAnsware${id}?text=${text}`, {\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadAllTags = () => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/allTags`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json()\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tloadRefreshedAnswares = (upvotes,downvotes,text,question_id) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createAnsware`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"upvotes\": upvotes,\r\n\t\t\t\t\"downvotes\": downvotes,\r\n\t\t\t\t\"text\": text,\r\n\t\t\t\t\"creation_date\":\"date\",\r\n\t\t\t\t\"question_id\": question_id,\r\n\t\t\t\t\"author\": \"author\"\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcreateQuestion = (question) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createQuestion`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"title\": question.title,\r\n\t\t\t\t\"body\": question.body,\r\n\t\t\t\t\"createTime\": question.createTime,\r\n\t\t\t\t\"author\": question.author,\r\n\t\t\t\t\"tags\": question.tags,\r\n\t\t\t\t\"upvotes\": question.upvotes,\r\n\t\t\t\t\"downvotes\": question.downvotes\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tloadLoginText = (username, password) => {\r\n\t\tconsole.log(password)\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/log?username=${username}&password=${password}`, {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tcreateTag = (tag) => {\r\n\t\treturn fetch(`${BASE_URL}/stackoverflow/createTag`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\"text\": tag.text\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Authorization\": this.authorization,\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t}).then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\nexport default RestClient;"]},"metadata":{},"sourceType":"module"}