{"ast":null,"code":"import QuestionInstance from '../model/Question';\nimport { EventEmitter } from \"events\";\nimport RestClient from '../rest/RestClient';\nconst client = new RestClient(\"username1\", \"password\");\n\nclass QuestionPresenter extends EventEmitter {\n  constructor() {\n    super();\n    QuestionInstance.on(\"QuestionAdded\", event => {\n      this.emit(\"QuestionAdded\", event);\n    });\n  }\n\n  addTagToQuestion(index, tag) {\n    return QuestionInstance.addTagToQuestion(index, tag);\n  }\n\n  addQuestion(newQuestion) {\n    return QuestionInstance.addQuestion(newQuestion);\n  }\n\n  async getQuestion() {\n    var questions = await client.loadAllStudents();\n    QuestionInstance.addQuestion(questions);\n    return QuestionInstance.getQuestion();\n  }\n\n  async getQuestionByText(text) {\n    var questions = await client.loadSerachedQuestions(text);\n    QuestionInstance.removeQuetions();\n    QuestionInstance.addQuestion(questions);\n    return QuestionInstance.getQuestion();\n  }\n\n  getQuestionById(id) {\n    return QuestionInstance.getQuestionbyId(id);\n  }\n\n  upvote(index) {\n    return QuestionInstance.upvote(index);\n  }\n\n  downvote(index) {\n    return QuestionInstance.downvote(index);\n  }\n\n  getVotes(index) {\n    return QuestionInstance.getVotes(index);\n  }\n\n}\n\nconst QuestionPresenterInstance = new QuestionPresenter();\nexport default QuestionPresenterInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/presenter/QuestionPresenter.js"],"names":["QuestionInstance","EventEmitter","RestClient","client","QuestionPresenter","constructor","on","event","emit","addTagToQuestion","index","tag","addQuestion","newQuestion","getQuestion","questions","loadAllStudents","getQuestionByText","text","loadSerachedQuestions","removeQuetions","getQuestionById","id","getQuestionbyId","upvote","downvote","getVotes","QuestionPresenterInstance"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,mBAA7B;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAEA,MAAMC,MAAM,GAAG,IAAID,UAAJ,CAAe,WAAf,EAA4B,UAA5B,CAAf;;AACA,MAAME,iBAAN,SAAgCH,YAAhC,CAA6C;AACzCI,EAAAA,WAAW,GAAG;AACV;AACAL,IAAAA,gBAAgB,CAACM,EAAjB,CAAoB,eAApB,EAAqCC,KAAK,IAAI;AAC1C,WAAKC,IAAL,CAAU,eAAV,EAA2BD,KAA3B;AACH,KAFD;AAGH;;AAEDE,EAAAA,gBAAgB,CAACC,KAAD,EAAQC,GAAR,EAAa;AACzB,WAAOX,gBAAgB,CAACS,gBAAjB,CAAkCC,KAAlC,EAAyCC,GAAzC,CAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,WAAOb,gBAAgB,CAACY,WAAjB,CAA6BC,WAA7B,CAAP;AACH;;AACgB,QAAXC,WAAW,GAAG;AAChB,QAAIC,SAAS,GAAG,MAAMZ,MAAM,CAACa,eAAP,EAAtB;AACAhB,IAAAA,gBAAgB,CAACY,WAAjB,CAA6BG,SAA7B;AACA,WAAOf,gBAAgB,CAACc,WAAjB,EAAP;AACH;;AAEsB,QAAjBG,iBAAiB,CAACC,IAAD,EAAO;AAC1B,QAAIH,SAAS,GAAG,MAAMZ,MAAM,CAACgB,qBAAP,CAA6BD,IAA7B,CAAtB;AACAlB,IAAAA,gBAAgB,CAACoB,cAAjB;AACApB,IAAAA,gBAAgB,CAACY,WAAjB,CAA6BG,SAA7B;AACA,WAAOf,gBAAgB,CAACc,WAAjB,EAAP;AACH;;AAEDO,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAOtB,gBAAgB,CAACuB,eAAjB,CAAiCD,EAAjC,CAAP;AACH;;AAEDE,EAAAA,MAAM,CAACd,KAAD,EAAQ;AACV,WAAOV,gBAAgB,CAACwB,MAAjB,CAAwBd,KAAxB,CAAP;AACH;;AAEDe,EAAAA,QAAQ,CAACf,KAAD,EAAQ;AACZ,WAAOV,gBAAgB,CAACyB,QAAjB,CAA0Bf,KAA1B,CAAP;AACH;;AAEDgB,EAAAA,QAAQ,CAAChB,KAAD,EAAQ;AACZ,WAAOV,gBAAgB,CAAC0B,QAAjB,CAA0BhB,KAA1B,CAAP;AACH;;AAzCwC;;AA2C7C,MAAMiB,yBAAyB,GAAG,IAAIvB,iBAAJ,EAAlC;AACA,eAAeuB,yBAAf","sourcesContent":["import QuestionInstance from '../model/Question';\r\nimport { EventEmitter } from \"events\";\r\nimport RestClient from '../rest/RestClient';\r\n\r\nconst client = new RestClient(\"username1\", \"password\");\r\nclass QuestionPresenter extends EventEmitter {\r\n    constructor() {\r\n        super();\r\n        QuestionInstance.on(\"QuestionAdded\", event => {\r\n            this.emit(\"QuestionAdded\", event);\r\n        })\r\n    }\r\n\r\n    addTagToQuestion(index, tag) {\r\n        return QuestionInstance.addTagToQuestion(index, tag);\r\n    }\r\n    addQuestion(newQuestion) {\r\n        return QuestionInstance.addQuestion(newQuestion);\r\n    }\r\n    async getQuestion() {\r\n        var questions = await client.loadAllStudents();\r\n        QuestionInstance.addQuestion(questions);\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    async getQuestionByText(text) {\r\n        var questions = await client.loadSerachedQuestions(text);\r\n        QuestionInstance.removeQuetions();\r\n        QuestionInstance.addQuestion(questions);\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    getQuestionById(id) {\r\n        return QuestionInstance.getQuestionbyId(id);\r\n    }\r\n\r\n    upvote(index) {\r\n        return QuestionInstance.upvote(index);\r\n    }\r\n\r\n    downvote(index) {\r\n        return QuestionInstance.downvote(index);\r\n    }\r\n\r\n    getVotes(index) {\r\n        return QuestionInstance.getVotes(index);\r\n    }\r\n}\r\nconst QuestionPresenterInstance = new QuestionPresenter();\r\nexport default QuestionPresenterInstance;"]},"metadata":{},"sourceType":"module"}