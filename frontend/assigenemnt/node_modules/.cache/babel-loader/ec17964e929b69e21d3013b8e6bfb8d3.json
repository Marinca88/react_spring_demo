{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iasmina\\\\Desktop\\\\a2\\\\assigenemnt2\\\\src\\\\container\\\\SmartHome.js\",\n    _s = $RefreshSig$();\n\nimport QuestionPresenterInstance from '../presenter/QuestionPresenter';\nimport AppPresenterInstance from '../presenter/AppPresenter';\nimport Home from '../presentational/Home';\nimport VotesPresenterInstance from '../presenter/VotesPresenter';\nimport { useEffect, useState } from 'react';\nimport UserPresenterInstance from '../presenter/UserPresenter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmartHome() {\n  _s();\n\n  const [text, setNewText] = useState({\n    text: AppPresenterInstance.getLoggedUser()\n  });\n  const [questions, setNewQuestions] = useState({\n    questions: []\n  });\n  useEffect(() => {\n    QuestionPresenterInstance.getQuestion().then(foundQuestions => {\n      setNewQuestions({\n        questions: [...foundQuestions]\n      });\n    });\n    QuestionPresenterInstance.on(\"q_updated\", foundQuestions => {\n      setNewQuestions({\n        questions: [...foundQuestions]\n      });\n    });\n    return () => {\n      QuestionPresenterInstance.removeListener();\n    };\n  }, []);\n\n  const onChange = (property, newValue) => {\n    setNewText({\n      [property]: newValue\n    });\n  };\n\n  const onSearch = () => {\n    QuestionPresenterInstance.getQuestionByText(text.text).then(foundQuestions => {\n      setNewQuestions({\n        questions: [...foundQuestions]\n      });\n    });\n  };\n\n  const onSelect = title => {\n    var questionsi = QuestionPresenterInstance.getQuestion();\n    var index = questionsi.indexOf(questionsi.find(element => element.title === title));\n    window.location.assign(\"/#/question-details/\" + index);\n  };\n\n  const onVote = (ud, title, body, user, createTime, upvotes, downvotes) => {\n    const questionsi = questions.questions;\n    const quest = questionsi.find(q => q.title === title && q.body === body && q.createTime === createTime && q.author === user && q.upvotes === upvotes && q.downvotes === downvotes);\n    console.log(quest.title);\n\n    if (ud === \"up\") {\n      QuestionPresenterInstance.upvote(quest);\n    } else {\n      if (ud === \"down\") {\n        QuestionPresenterInstance.downvote(quest);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Home, {\n    text: text.text,\n    questions: questions.questions,\n    onSearch: onSearch,\n    onChange: onChange,\n    onSelect: onSelect,\n    onVote: onVote\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SmartHome, \"fTyidhlLSfZFdVVWhC5Y+NlUi8U=\");\n\n_c = SmartHome;\nexport default SmartHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmartHome\");","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/container/SmartHome.js"],"names":["QuestionPresenterInstance","AppPresenterInstance","Home","VotesPresenterInstance","useEffect","useState","UserPresenterInstance","SmartHome","text","setNewText","getLoggedUser","questions","setNewQuestions","getQuestion","then","foundQuestions","on","removeListener","onChange","property","newValue","onSearch","getQuestionByText","onSelect","title","questionsi","index","indexOf","find","element","window","location","assign","onVote","ud","body","user","createTime","upvotes","downvotes","quest","q","author","console","log","upvote","downvote"],"mappings":"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","sourcesContent":["import QuestionPresenterInstance from '../presenter/QuestionPresenter'\r\nimport AppPresenterInstance from '../presenter/AppPresenter'\r\nimport Home from '../presentational/Home'\r\nimport VotesPresenterInstance from '../presenter/VotesPresenter'\r\nimport { useEffect, useState } from 'react';\r\nimport UserPresenterInstance from '../presenter/UserPresenter';\r\n\r\nfunction SmartHome() {\r\n    const [text, setNewText] = useState({\r\n        text:AppPresenterInstance.getLoggedUser()\r\n    });\r\n    const [questions, setNewQuestions] = useState({\r\n        questions: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        QuestionPresenterInstance.getQuestion().then(foundQuestions => {\r\n            setNewQuestions({\r\n                questions: [...foundQuestions]\r\n            }\r\n            )\r\n        });\r\n        QuestionPresenterInstance.on(\"q_updated\", foundQuestions => {\r\n            setNewQuestions({\r\n                questions: [...foundQuestions]\r\n            }\r\n            )\r\n        });\r\n        return () => {\r\n            QuestionPresenterInstance.removeListener();\r\n        }\r\n    }, []);\r\n\r\n\r\n    const onChange = (property, newValue) => {\r\n        setNewText({\r\n            [property]: newValue\r\n        });\r\n    }\r\n    const onSearch = () => {\r\n        QuestionPresenterInstance.getQuestionByText(text.text).then(foundQuestions => {\r\n            setNewQuestions({\r\n                questions: [...foundQuestions]\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    const onSelect = (title) => {\r\n        var questionsi = QuestionPresenterInstance.getQuestion()\r\n        var index = questionsi.indexOf(questionsi.find(element => element.title === title))\r\n        window.location.assign(\"/#/question-details/\" + index)\r\n    }\r\n\r\n    const onVote = (ud, title, body, user, createTime, upvotes, downvotes) => {\r\n        const questionsi = questions.questions\r\n        const quest = questionsi.find(q => q.title === title && q.body === body && q.createTime === createTime && q.author === user && q.upvotes === upvotes && q.downvotes === downvotes );\r\n        console.log(quest.title);\r\n        if (ud === \"up\") {\r\n            QuestionPresenterInstance.upvote(quest)\r\n\r\n            } else {\r\n                if (ud === \"down\") {\r\n                    QuestionPresenterInstance.downvote(quest)\r\n                }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Home text={text.text}\r\n            questions={questions.questions}\r\n            onSearch={onSearch}\r\n            onChange={onChange}\r\n            onSelect={onSelect}\r\n            onVote={onVote}\r\n            />\r\n        );\r\n}\r\nexport default SmartHome;"]},"metadata":{},"sourceType":"module"}