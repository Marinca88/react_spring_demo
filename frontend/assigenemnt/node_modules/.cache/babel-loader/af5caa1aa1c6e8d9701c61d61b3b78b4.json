{"ast":null,"code":"import WebSocketListenerInstance from \"../ws/WebSocketListener\";\n\nclass Question {\n  constructor() {\n    this.state = {\n      questions: []\n    };\n  }\n\n  addTagToQuestion(index, tag) {\n    this.state.questions[index].tags = [...this.state.questions[index].tags, tag];\n  }\n\n  addQuestion(questions) {\n    this.state.questions = [...questions];\n  }\n\n  getQuestion() {\n    return this.state.questions;\n  }\n\n  removeQuetions() {\n    this.state.questions = [];\n  }\n\n  getQuestionbyId(id) {\n    return this.state.questions[id];\n  }\n\n  upvote(question) {\n    var index = this.state.questions.indexOf(question);\n    this.state.questions[index].upvotes = this.state.questions[index].upvotes + 1;\n    return this.state.questions;\n  }\n\n  downvote(question) {\n    var index = this.state.questions.indexOf(question);\n    this.state.questions[index].downvotes = this.state.questions[index].downvotes + 1;\n    return this.state.questions;\n  }\n\n  getVotes(index) {\n    var votes = this.state.questions[index].upvotes - this.state.questions[index].downvotes;\n    return votes;\n  }\n\n}\n\nconst QuestionInstance = new Question();\nexport default QuestionInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/model/Question.js"],"names":["WebSocketListenerInstance","Question","constructor","state","questions","addTagToQuestion","index","tag","tags","addQuestion","getQuestion","removeQuetions","getQuestionbyId","id","upvote","question","indexOf","upvotes","downvote","downvotes","getVotes","votes","QuestionInstance"],"mappings":"AAAA,OAAOA,yBAAP,MAAsC,yBAAtC;;AAEA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAIH;;AAEDC,EAAAA,gBAAgB,CAACC,KAAD,EAAOC,GAAP,EAAY;AACxB,SAAKJ,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4BE,IAA5B,GAAmC,CAC/B,GAAG,KAAKL,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4BE,IADA,EAE/BD,GAF+B,CAAnC;AAIH;;AAEDE,EAAAA,WAAW,CAACL,SAAD,EAAY;AACnB,SAAKD,KAAL,CAAWC,SAAX,GAAuB,CACnB,GAAGA,SADgB,CAAvB;AAGH;;AAEDM,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKP,KAAL,CAAWC,SAAlB;AACH;;AAEDO,EAAAA,cAAc,GAAG;AACb,SAAKR,KAAL,CAAWC,SAAX,GAAuB,EAAvB;AACH;;AAGDQ,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAO,KAAKV,KAAL,CAAWC,SAAX,CAAqBS,EAArB,CAAP;AACH;;AAEDC,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,QAAIT,KAAK,GAAG,KAAKH,KAAL,CAAWC,SAAX,CAAqBY,OAArB,CAA6BD,QAA7B,CAAZ;AACA,SAAKZ,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4BW,OAA5B,GAAsC,KAAKd,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4BW,OAA5B,GAAsC,CAA5E;AACA,WAAO,KAAKd,KAAL,CAAWC,SAAlB;AAEH;;AAEDc,EAAAA,QAAQ,CAACH,QAAD,EAAW;AACf,QAAIT,KAAK,GAAG,KAAKH,KAAL,CAAWC,SAAX,CAAqBY,OAArB,CAA6BD,QAA7B,CAAZ;AACA,SAAKZ,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4Ba,SAA5B,GAAwC,KAAKhB,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4Ba,SAA5B,GAAwC,CAAhF;AACA,WAAO,KAAKhB,KAAL,CAAWC,SAAlB;AACH;;AAEDgB,EAAAA,QAAQ,CAACd,KAAD,EAAQ;AACZ,QAAIe,KAAK,GAAG,KAAKlB,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4BW,OAA5B,GAAsC,KAAKd,KAAL,CAAWC,SAAX,CAAqBE,KAArB,EAA4Ba,SAA9E;AACA,WAAOE,KAAP;AACH;;AAlDU;;AAoDf,MAAMC,gBAAgB,GAAG,IAAIrB,QAAJ,EAAzB;AACA,eAAeqB,gBAAf","sourcesContent":["import WebSocketListenerInstance from \"../ws/WebSocketListener\"\r\n\r\nclass Question {\r\n    constructor() {\r\n        this.state = {\r\n            questions: []\r\n        };\r\n       \r\n    }\r\n\r\n    addTagToQuestion(index,tag) {\r\n        this.state.questions[index].tags = [\r\n            ...this.state.questions[index].tags,\r\n            tag\r\n        ];\r\n    }\r\n\r\n    addQuestion(questions) {\r\n        this.state.questions = [\r\n            ...questions\r\n        ];\r\n    }\r\n\r\n    getQuestion() {\r\n        return this.state.questions;\r\n    }\r\n\r\n    removeQuetions() {\r\n        this.state.questions = [];\r\n    }\r\n\r\n\r\n    getQuestionbyId(id) {\r\n        return this.state.questions[id];\r\n    }\r\n\r\n    upvote(question) {\r\n        var index = this.state.questions.indexOf(question);\r\n        this.state.questions[index].upvotes = this.state.questions[index].upvotes + 1;\r\n        return this.state.questions;\r\n\r\n    }\r\n\r\n    downvote(question) {\r\n        var index = this.state.questions.indexOf(question);\r\n        this.state.questions[index].downvotes = this.state.questions[index].downvotes + 1;\r\n        return this.state.questions;\r\n    }\r\n\r\n    getVotes(index) {\r\n        var votes = this.state.questions[index].upvotes - this.state.questions[index].downvotes\r\n        return votes\r\n    }\r\n}\r\nconst QuestionInstance = new Question();\r\nexport default QuestionInstance;"]},"metadata":{},"sourceType":"module"}