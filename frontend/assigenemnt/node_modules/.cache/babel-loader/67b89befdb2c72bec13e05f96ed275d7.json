{"ast":null,"code":"import QuestionInstance from '../model/Question';\nimport { EventEmitter } from \"events\";\n\nclass QuestionPresenter extends EventEmitter {\n  constructor() {\n    super();\n    QuestionInstance.on(\"QuestionAdded\", event => {\n      this.emit(\"QuestionAdded\", event);\n    });\n  }\n\n  addTagToQuestion(index, tag) {\n    return QuestionInstance.addTagToQuestion(index, tag);\n  }\n\n  addQuestion(newQuestion) {\n    return QuestionInstance.addQuestion(newQuestion);\n  }\n\n  getQuestion() {\n    return QuestionInstance.getQuestion();\n  }\n\n  getQuestionByText(text) {\n    return QuestionInstance.getQuestionByText(text);\n  }\n\n  getQuestionById(id) {\n    return QuestionInstance.getQuestionbyId(id);\n  }\n\n  upvote(index) {\n    return QuestionInstance.upvote(index);\n  }\n\n  downvote(index) {\n    return QuestionInstance.downvote(index);\n  }\n\n  getVotes(index) {\n    return QuestionInstance.getVotes(index);\n  }\n\n}\n\nconst QuestionPresenterInstance = new QuestionPresenter();\nexport default QuestionPresenterInstance;","map":{"version":3,"sources":["C:/Users/Iasmina/Desktop/a2/assigenemnt2/src/presenter/QuestionPresenter.js"],"names":["QuestionInstance","EventEmitter","QuestionPresenter","constructor","on","event","emit","addTagToQuestion","index","tag","addQuestion","newQuestion","getQuestion","getQuestionByText","text","getQuestionById","id","getQuestionbyId","upvote","downvote","getVotes","QuestionPresenterInstance"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,mBAA7B;AACA,SAASC,YAAT,QAA6B,QAA7B;;AAEA,MAAMC,iBAAN,SAAgCD,YAAhC,CAA6C;AACzCE,EAAAA,WAAW,GAAG;AACV;AACAH,IAAAA,gBAAgB,CAACI,EAAjB,CAAoB,eAApB,EAAqCC,KAAK,IAAI;AAC1C,WAAKC,IAAL,CAAU,eAAV,EAA2BD,KAA3B;AACH,KAFD;AAGH;;AAEDE,EAAAA,gBAAgB,CAACC,KAAD,EAAQC,GAAR,EAAa;AACzB,WAAOT,gBAAgB,CAACO,gBAAjB,CAAkCC,KAAlC,EAAyCC,GAAzC,CAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,WAAOX,gBAAgB,CAACU,WAAjB,CAA6BC,WAA7B,CAAP;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAOZ,gBAAgB,CAACY,WAAjB,EAAP;AACH;;AAEDC,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,WAAOd,gBAAgB,CAACa,iBAAjB,CAAmCC,IAAnC,CAAP;AACH;;AAEDC,EAAAA,eAAe,CAACC,EAAD,EAAK;AAChB,WAAOhB,gBAAgB,CAACiB,eAAjB,CAAiCD,EAAjC,CAAP;AACH;;AAEDE,EAAAA,MAAM,CAACV,KAAD,EAAQ;AACV,WAAOR,gBAAgB,CAACkB,MAAjB,CAAwBV,KAAxB,CAAP;AACH;;AAEDW,EAAAA,QAAQ,CAACX,KAAD,EAAQ;AACZ,WAAOR,gBAAgB,CAACmB,QAAjB,CAA0BX,KAA1B,CAAP;AACH;;AAEDY,EAAAA,QAAQ,CAACZ,KAAD,EAAQ;AACZ,WAAOR,gBAAgB,CAACoB,QAAjB,CAA0BZ,KAA1B,CAAP;AACH;;AApCwC;;AAsC7C,MAAMa,yBAAyB,GAAG,IAAInB,iBAAJ,EAAlC;AACA,eAAemB,yBAAf","sourcesContent":["import QuestionInstance from '../model/Question';\r\nimport { EventEmitter } from \"events\";\r\n\r\nclass QuestionPresenter extends EventEmitter {\r\n    constructor() {\r\n        super();\r\n        QuestionInstance.on(\"QuestionAdded\", event => {\r\n            this.emit(\"QuestionAdded\", event);\r\n        })\r\n    }\r\n\r\n    addTagToQuestion(index, tag) {\r\n        return QuestionInstance.addTagToQuestion(index, tag);\r\n    }\r\n    addQuestion(newQuestion) {\r\n        return QuestionInstance.addQuestion(newQuestion);\r\n    }\r\n    getQuestion() {\r\n        return QuestionInstance.getQuestion();\r\n    }\r\n\r\n    getQuestionByText(text) {\r\n        return QuestionInstance.getQuestionByText(text);\r\n    }\r\n\r\n    getQuestionById(id) {\r\n        return QuestionInstance.getQuestionbyId(id);\r\n    }\r\n\r\n    upvote(index) {\r\n        return QuestionInstance.upvote(index);\r\n    }\r\n\r\n    downvote(index) {\r\n        return QuestionInstance.downvote(index);\r\n    }\r\n\r\n    getVotes(index) {\r\n        return QuestionInstance.getVotes(index);\r\n    }\r\n}\r\nconst QuestionPresenterInstance = new QuestionPresenter();\r\nexport default QuestionPresenterInstance;"]},"metadata":{},"sourceType":"module"}